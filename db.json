{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c03c34a33918fe2c3e435d072f54e1d10b1e6f7d","modified":1613220130574},{"_id":"source/_posts/C++1.md","hash":"f1329abc8cd1160c5ae47a11ce3e9b3a3d48b0a3","modified":1613222206862},{"_id":"source/_posts/C-Hello-World-Again.md","hash":"fb28f243040bbc8eae428427e31990c7813d0396","modified":1613222200726},{"_id":"source/_posts/N-queens.md","hash":"027647a60c2967dfc3df22ecdff1af453499327e","modified":1611484692669},{"_id":"source/_posts/NAME-and-Shakespeare.md","hash":"ed6833b58c220f4990ac8e86f4e23ce4168a3727","modified":1611560643390},{"_id":"source/_posts/fix-grub.md","hash":"24199da7adb101581247e0d9fdea542f6ebaa967","modified":1616236137990},{"_id":"source/_posts/hello-world.md","hash":"3c7068caa6a27778e912bbbe44ce6cb0518f0ece","modified":1609064375924},{"_id":"source/_posts/personal.md","hash":"0fd712d140ee38d88a5792496924555d9cea2c86","modified":1616235681243},{"_id":"source/_posts/sicp-1.md","hash":"0f248addfa64f43f23e55816e3d2159fe2108259","modified":1613222289239},{"_id":"source/categories/index.md","hash":"1f0d4221f27a1bb92c194e4a31c53ff5293c4f54","modified":1609061201857},{"_id":"source/about/index.md","hash":"3fcbfa134f6f77d206f004be3d444131e1a498ef","modified":1613226372776},{"_id":"source/tags/index.md","hash":"821ff807f334f07e81307a8ea3ad7e13f56bc942","modified":1609061214963},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1609057204209},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1609057204213},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1609057204209},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1609057204213},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1609057204213},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1609057204213},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1609057204213},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1609057204213},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1609057204213},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1609057204216},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1609057204209},{"_id":"themes/next/_config.yml","hash":"4718b5fdd775ac61d87329e4fd2b725c1c5e5b34","modified":1611557409454},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1609057204209},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1609057204209},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1609057204209},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1609057204209},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1609057204209},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1609057204209},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1609057204209},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1609057204209},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1609057204209},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1609057204209},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1609057204213},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1609057204213},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1609057204213},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1609057204213},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1609057204213},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1609057204213},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1609057204213},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1609057204209},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1609057204213},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1609057204213},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1609057204213},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1609057204213},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1609057204213},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1609057204213},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1609057204213},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1609057204213},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1609057204213},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1609057204213},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1609057204213},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1609057204213},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1609057204213},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1609057204213},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1609057204213},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1609057204213},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1609057204213},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1609057204213},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1609057204213},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1609057204213},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1609057204216},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1609057204216},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1609057204216},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1609057204216},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1609057204213},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1609057204213},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1609057204213},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1609057204216},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1609057204216},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1609057204216},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1609057204209},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1609057204209},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1609057204209},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1609057204209},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1609057204213},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1609057204213},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1609057204213},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1609057204213},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1609057204213},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1609057204213},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1609057204213},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1609057204213},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1609057204213},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1609057204216},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1609057204213},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1609057204216},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1609057204216},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1609057204216},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1609057204216},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1609057204213},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1609057204216},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1609057204216},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1609057204216},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1609057204216},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1609057204216},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1609057204216},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1609057204216},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1609057204216},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1609057204216},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1609057204216},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1609057204216},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1609057204216},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1609057204216},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1609057204216},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1609057204216},{"_id":"themes/next/scripts/filters/post.js","hash":"f71e101fd91bf4ca526342be348bc26591478bc4","modified":1609063708683},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1609057204216},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1609057204216},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1609057204216},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1609057204216},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1609057204216},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1609057204216},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1609057204216},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1609057204216},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1609057204216},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1609057204216},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1609057204216},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1609057204219},{"_id":"themes/next/source/css/main.styl","hash":"7064d64ce46bdae1b6967efaac6e051863d6ff15","modified":1609063902349},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1609057204219},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1609057204219},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1609057204219},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1609057204219},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1609057204219},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1609057204219},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1609057204219},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1609057204219},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1609057204219},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1609057204219},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1609057204219},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1609057204219},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1609057204219},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1609057204219},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1609057204223},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1609057204223},{"_id":"themes/next/source/js/motion.js","hash":"306cfa019d0f63d96372922251828144d96dfe0c","modified":1609063570614},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1609057204223},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1609057204223},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1609057204216},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1609057204216},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1609057204216},{"_id":"themes/next/source/js/utils.js","hash":"ef9a9844a85d3fdb127a5286f53f11c30ec84a76","modified":1609063805846},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1609057204216},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1609057204216},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1609057204216},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1609057204216},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1609057204216},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1609057204216},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1609057204216},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1609057204216},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1609057204216},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1609057204216},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1609057204216},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1609057204216},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1609057204216},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1609057204223},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1609057204216},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1609057204216},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1609057204216},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1609057204216},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1609057204216},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1609057204216},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1609057204216},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1609057204216},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1609057204216},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1609057204216},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1609057204216},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1609057204216},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1609057204216},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1609057204216},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1609057204216},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1609057204216},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1609057204216},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1609057204216},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1609057204216},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1609057204216},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1609057204216},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1609057204216},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1609057204216},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1609057204216},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1609057204216},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1609057204216},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1609057204216},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1609057204216},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1609057204216},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1609057204216},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1609057204216},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1609057204216},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1609057204219},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1609057204219},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1609057204219},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1609057204219},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1609057204223},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1609057204223},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1609057204219},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1609057204219},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1609057204223},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1609057204219},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1609057204223},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1609057204219},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1609057204223},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1609057204223},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1609057204219},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1609057204219},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1609057204219},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1609057204219},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1609057204219},{"_id":"themes/next/source/images/avatar.jpg","hash":"dd27b8bec1d1439187cb1b1487f0e99e4de20b2c","modified":1608021871956},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1609057204223},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1609057204223}],"Category":[{"name":"C++","_id":"ckmhlbc940004bh8yfzeu9ah4"},{"name":"C","_id":"ckmhlbc98000abh8y2qmn1vii"},{"name":"Algorithm","_id":"ckmhlbc9b000gbh8y7nmp4c0j"},{"name":"Good-article","_id":"ckmhlbc9d000lbh8ygox6amrz"},{"name":"BUG","_id":"ckmhlbc9e000pbh8y4v6q870a"},{"name":"Rust","_id":"ckmhlbc9f000ubh8y34sma30r"},{"name":"PLT","_id":"ckmhlbc9g000xbh8y1ml23f9e"}],"Data":[],"Page":[{"title":"Categories","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ntype: categories\n---","date":"2021-03-20T10:30:06.827Z","updated":"2020-12-27T09:26:41.857Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckmhlbc8x0000bh8y5vhz7lul","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","mathjax":true,"_content":"- [English](#english )\n- [中文](#中文 )\n\n## English\nHello. I am Oyyko.\nNow studying in SCGY[^1] of USTC[^2]\nMajor in Computer Science\n\nThis is my [Github](https://github.com/Oyyko)\n\n\n\n## 中文\n你好。我是Oyyko\n就读于中国科学技术大学少年班学院\n计算机科学与技术专业\n\n这里是我的[Github](https://github.com/Oyyko)\n\n\n\n\n[^1]: School of the Gifted Young\n[^2]: University of Science and Technology in China\n","source":"about/index.md","raw":"---\ntitle: About\nmathjax: true\n---\n- [English](#english )\n- [中文](#中文 )\n\n## English\nHello. I am Oyyko.\nNow studying in SCGY[^1] of USTC[^2]\nMajor in Computer Science\n\nThis is my [Github](https://github.com/Oyyko)\n\n\n\n## 中文\n你好。我是Oyyko\n就读于中国科学技术大学少年班学院\n计算机科学与技术专业\n\n这里是我的[Github](https://github.com/Oyyko)\n\n\n\n\n[^1]: School of the Gifted Young\n[^2]: University of Science and Technology in China\n","date":"2021-03-20T10:30:06.827Z","updated":"2021-02-13T14:26:12.776Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckmhlbc920002bh8y7kj6amjz","content":"<ul>\n<li><a href=\"#english\">English</a></li>\n<li><a href=\"#中文\">中文</a></li>\n</ul>\n<h2 id=\"English\"><a href=\"#English\" class=\"headerlink\" title=\"English\"></a>English</h2><p>Hello. I am Oyyko.<br>Now studying in SCGY<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup> of USTC<sup><a href=\"#fn_2\" id=\"reffn_2\">2</a></sup><br>Major in Computer Science</p>\n<p>This is my <a href=\"https://github.com/Oyyko\">Github</a></p>\n<h2 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h2><p>你好。我是Oyyko<br>就读于中国科学技术大学少年班学院<br>计算机科学与技术专业</p>\n<p>这里是我的<a href=\"https://github.com/Oyyko\">Github</a></p>\n<blockquote id=\"fn_1\">\n<sup>1</sup>. School of the Gifted Young<a href=\"#reffn_1\" title=\"Jump back to footnote [1] in the text.\"> &#8617;</a>\n</blockquote>\n<blockquote id=\"fn_2\">\n<sup>2</sup>. University of Science and Technology in China<a href=\"#reffn_2\" title=\"Jump back to footnote [2] in the text.\"> &#8617;</a>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#english\">English</a></li>\n<li><a href=\"#中文\">中文</a></li>\n</ul>\n<h2 id=\"English\"><a href=\"#English\" class=\"headerlink\" title=\"English\"></a>English</h2><p>Hello. I am Oyyko.<br>Now studying in SCGY<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup> of USTC<sup><a href=\"#fn_2\" id=\"reffn_2\">2</a></sup><br>Major in Computer Science</p>\n<p>This is my <a href=\"https://github.com/Oyyko\">Github</a></p>\n<h2 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h2><p>你好。我是Oyyko<br>就读于中国科学技术大学少年班学院<br>计算机科学与技术专业</p>\n<p>这里是我的<a href=\"https://github.com/Oyyko\">Github</a></p>\n<blockquote id=\"fn_1\">\n<sup>1</sup>. School of the Gifted Young<a href=\"#reffn_1\" title=\"Jump back to footnote [1] in the text.\"> &#8617;</a>\n</blockquote>\n<blockquote id=\"fn_2\">\n<sup>2</sup>. University of Science and Technology in China<a href=\"#reffn_2\" title=\"Jump back to footnote [2] in the text.\"> &#8617;</a>\n</blockquote>\n"},{"title":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\n---","date":"2021-03-20T10:30:06.827Z","updated":"2020-12-27T09:26:54.963Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckmhlbc960006bh8yghcve671","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++ Note 1","date":"2021-01-04T16:00:00.000Z","mathjax":true,"_content":"\n本文是我的C++笔记的第一篇\nMy First C++ Note;\n\n<!--more-->\n\n\n## 一些例子\n### 1\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    string x{\"222333\"};\n    char *y = \"222333\";\n    string xx{x, 3};\n    string yy{y, 3};\n    cout << xx << endl;\n    cout << yy << endl;\n}\n```\n### 2\n```cpp\nvoid pp(int x)\n{\n    cout<<\"int\";\n}\n\nvoid pp(int* x)\n{\n    cout<<\"int*\";\n}\n\n\nint main()\n{\n    pp(nullptr);// 输出int*\n    pp(NULL); // 有歧义，编译失败\n}\n``` \n\n## 一些疑问\n```cpp\nint s[2][2]{\n    {1, 2}, {3, 4}};\nfor (int *i : s)\n{\n    for (int j{}; j < 2; ++j)\n    {\n        cout << i[j];\n    }\n}\n```\n这段代码为何生效？s的类型不应该是int(*)[2]吗?\n解释：s的类型为int[2][2],但是非常容易decay,因此大多数时候会提示为int(*)[2]，例如你用char x{s};试图从报错中得到s的类型的时候就会提示为int(*)[2].此处从s中取出的应该是int[2],然后被decay为int*\n追问：那有没有办法让i的类型为int[2]\n解答：写成auto& i 或者 int(&x)[2]即可\n完整代码为\n```cpp\nint s[2][2]{\n    {1, 2}, {3, 4}};\nfor (int(&i)[2] : s)\n{\n    for (int j : i)\n    {\n        cout << j;\n    }\n}\nfor (auto &i : s)\n{\n    for (auto j : i)\n    {\n        cout << j;\n    }\n}\nfor (int j : (*s))\n{\n    cout << j;\n}\n```","source":"_posts/C++1.md","raw":"---\ntitle: C++ Note 1\ndate: 2021-01-05\ntag: \n- C++\ncategory: C++\nmathjax: true\n---\n\n本文是我的C++笔记的第一篇\nMy First C++ Note;\n\n<!--more-->\n\n\n## 一些例子\n### 1\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    string x{\"222333\"};\n    char *y = \"222333\";\n    string xx{x, 3};\n    string yy{y, 3};\n    cout << xx << endl;\n    cout << yy << endl;\n}\n```\n### 2\n```cpp\nvoid pp(int x)\n{\n    cout<<\"int\";\n}\n\nvoid pp(int* x)\n{\n    cout<<\"int*\";\n}\n\n\nint main()\n{\n    pp(nullptr);// 输出int*\n    pp(NULL); // 有歧义，编译失败\n}\n``` \n\n## 一些疑问\n```cpp\nint s[2][2]{\n    {1, 2}, {3, 4}};\nfor (int *i : s)\n{\n    for (int j{}; j < 2; ++j)\n    {\n        cout << i[j];\n    }\n}\n```\n这段代码为何生效？s的类型不应该是int(*)[2]吗?\n解释：s的类型为int[2][2],但是非常容易decay,因此大多数时候会提示为int(*)[2]，例如你用char x{s};试图从报错中得到s的类型的时候就会提示为int(*)[2].此处从s中取出的应该是int[2],然后被decay为int*\n追问：那有没有办法让i的类型为int[2]\n解答：写成auto& i 或者 int(&x)[2]即可\n完整代码为\n```cpp\nint s[2][2]{\n    {1, 2}, {3, 4}};\nfor (int(&i)[2] : s)\n{\n    for (int j : i)\n    {\n        cout << j;\n    }\n}\nfor (auto &i : s)\n{\n    for (auto j : i)\n    {\n        cout << j;\n    }\n}\nfor (int j : (*s))\n{\n    cout << j;\n}\n```","slug":"C++1","published":1,"updated":"2021-02-13T13:16:46.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc900001bh8y08084suc","content":"<p>本文是我的C++笔记的第一篇<br>My First C++ Note;</p>\n<a id=\"more\"></a>\n<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> x&#123;<span class=\"string\">&quot;222333&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *y = <span class=\"string\">&quot;222333&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> xx&#123;x, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> yy&#123;y, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; xx &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; yy &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;int&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pp</span><span class=\"params\">(<span class=\"keyword\">int</span>* x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;int*&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp(<span class=\"literal\">nullptr</span>);<span class=\"comment\">// 输出int*</span></span><br><span class=\"line\">    pp(<span class=\"literal\">NULL</span>); <span class=\"comment\">// 有歧义，编译失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一些疑问\"><a href=\"#一些疑问\" class=\"headerlink\" title=\"一些疑问\"></a>一些疑问</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">2</span>]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> *i : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j&#123;&#125;; j &lt; <span class=\"number\">2</span>; ++j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; i[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码为何生效？s的类型不应该是int(<em>)[2]吗?<br>解释：s的类型为int[2][2],但是非常容易decay,因此大多数时候会提示为int(</em>)[2]，例如你用char x{s};试图从报错中得到s的类型的时候就会提示为int(<em>)[2].此处从s中取出的应该是int[2],然后被decay为int</em><br>追问：那有没有办法让i的类型为int[2]<br>解答：写成auto&amp; i 或者 int(&amp;x)[2]即可<br>完整代码为<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">2</span>]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>(&amp;i)[<span class=\"number\">2</span>] : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j : i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j : (*s))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本文是我的C++笔记的第一篇<br>My First C++ Note;</p>","more":"<h2 id=\"一些例子\"><a href=\"#一些例子\" class=\"headerlink\" title=\"一些例子\"></a>一些例子</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> x&#123;<span class=\"string\">&quot;222333&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *y = <span class=\"string\">&quot;222333&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> xx&#123;x, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> yy&#123;y, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; xx &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; yy &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;int&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pp</span><span class=\"params\">(<span class=\"keyword\">int</span>* x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;int*&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pp(<span class=\"literal\">nullptr</span>);<span class=\"comment\">// 输出int*</span></span><br><span class=\"line\">    pp(<span class=\"literal\">NULL</span>); <span class=\"comment\">// 有歧义，编译失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一些疑问\"><a href=\"#一些疑问\" class=\"headerlink\" title=\"一些疑问\"></a>一些疑问</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">2</span>]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> *i : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j&#123;&#125;; j &lt; <span class=\"number\">2</span>; ++j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; i[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码为何生效？s的类型不应该是int(<em>)[2]吗?<br>解释：s的类型为int[2][2],但是非常容易decay,因此大多数时候会提示为int(</em>)[2]，例如你用char x{s};试图从报错中得到s的类型的时候就会提示为int(<em>)[2].此处从s中取出的应该是int[2],然后被decay为int</em><br>追问：那有没有办法让i的类型为int[2]<br>解答：写成auto&amp; i 或者 int(&amp;x)[2]即可<br>完整代码为<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">2</span>][<span class=\"number\">2</span>]&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>(&amp;i)[<span class=\"number\">2</span>] : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j : i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;i : s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> j : i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j : (*s))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"C Hello World Again","date":"2021-01-01T16:00:00.000Z","mathjax":false,"_content":"\n本文是我给地空学院的学生的C语言讲座的讲稿\n\n<!--more-->\n\n#  Hello World Again\n\n[TOC]\n\n##  指针与数组\n\n`a[i]=*(a+i)=i[a]`\n\n`int (*x)[10]`与`int *x[10]`的区别\n前者是指向一个长度为10的整型数组的**指针**\n后者是一个长度为10的(指向整型变量的指针)的**数组**\n\n指针与数组的互换\n```c\nfor(int i=0;i<10;++i)\n{\n    a[i]=0;\n}\n  \nfor (int *p = a; p != (a + 10); ++p)\n{\n    printf(\"%d\\n\", *p);\n}\n  \n```\n##  C风格的字符串处理\n\n###  字符串的表示\n\n```c\nchar s[100]=\"Hello\";\n```\n```c\nchar *s=\"Hello\";\n// 这是一个特殊的行为\n// 注意到int *x=2是完全错误的\n// 但这个语句是对的\n// 编译器会开辟一块内存来存放\"Hello\"并用s指向它\n// 但注意：这个\"Hello\"是不可更改的\n// 例如下面的语句会出现错误\ns[1]='a';\n```\n\n```c\nprintf(\"%c\\n\", \"abc\"[2]);//输出c\nprintf(\"%s\\n\", \"abc\"+1); //输出bc\n//此处的\"abc\"会被解释为指向char数组{'a','b','c','\\0'}的指针\n```\n\n```c\nchar s[100]={'a','b','c'};\n```\n```c\nchar *s = (char *)malloc(sizeof(char) * 10);\n*s++ = 'a';\n*s++ = 'b';\n*s++ = 'c';\nprintf(\"%s\", s - 2); //输出bc\nprintf(\"%s\", s - 1); //输出c\nfree(s - 3); //释放掉用malloc申请的内存\n  \n```\n###  字符串拷贝\n\n```c\nvoid strcpy1(char *a, char *b) //把b赋给a\n{\n    while (*b)\n    {\n        *a++ = *b++;\n    }\n    while (*a)\n    {\n        *a++ = '\\0';\n    }\n}\n  \nint main()\n{\n    char a[100];\n    char b[100];\n    while (1)\n    {\n        scanf(\"%s\", b);\n        strcpy1(a, b);\n        printf(\"%s\\n\", a);\n    }\n}\n```\n\n##  求值顺序\n\n```c\nprintf(\"%c%c%c\\n\",getchar(),getchar(),getchar());\n```\n该语句在gcc编译器下的作用是：读入三个字符并倒序输出。\n因为gcc编译器的实现方法是从右向左求值\n\n##  变量作用域\n\n\n```c\n{\n    int x=2;\n}\nprintf(\"%d\",x); //不会输出\n```\n\n```c\nint x=8;\n{\n    int x=3;\n    printf(\"%d\",x);// 输出3\n}\n```\n\n  \n\n##  用宏实现max函数\n\n\n`#define  MAX(x,y)  x > y ? x : y`\n但考虑`MAX(1!=2,3)为1 != 2 > 3 ? 1 != 2 : 3`\n由于`!=`的优先级小于`>`\n因此上式为`1 != (2>3) ? 1!=2 : 3`\n为`(1 != 0) ? 1!=2 : 3`\n为`1 ? 1 : 3`\n为`1`\n而该式应该是MAX(1,3)=3\n因此加括号为\n`#define  MAX(x,y)  (x) > (y) ? (x) : (y)`\n但考虑`3+ MAX(1,2)`\n为`3 + 1 > 2 ? 1 : 2`\n为`4 > 2 ? 1 : 2`\n为`1 ? 1 : 2`\n为`1`\n而实际上应该是5\n因此我们继续修改这个宏\n`#define MAX(x,y) ((x) > (y) ? (x) : (y))`\n但考虑`MAX(i++,j++)`\n展开后为`i++ > j++ ? i++ : j++`\n这会使得i与j都自增两次\n为此考虑这么定义宏\n```c\n#define MAX(x,y)({     \\\n    int _x = x;        \\\n    int _y = y;        \\\n    _x > _y ? _x : _y; \\\n})\n```\n该宏会重新定义两个变量_x与_y来进行比较，从而使得MAX(i++,j++)符合要求。\n\n  \n\n##  函数与数组的相似点与共同点\n\n相似点：\n数组声明：int x[10]\n函数声明：int sum(int,int)\n数组类型：int [10]\n函数类型：int (int,int)\n数组指针：int (*x)[10]\n函数指针：int (*sum)(int,int)\n数组指针类型：int (*)[10]\n函数指针类型：int (*)(int,int)\n\n数组、函数共同点：\n1.数组、函数都不可拷贝。\n\n2.因为第1点，数组、函数不可以做函数的返回值，但函数可以返回数组的指针或函数的指针。\n\n3.数组、函数可用于函数形参，但因为第1点，编译器会对其做处理。如果形参类型为数组，实际形参类型会转换成元素类型的指针，例如voidfun(int arr[5])等价于void fun(int arr*)。如果形参类型为函数，实际形参类型会转换成对应的函数指针类型，例如void fun (int test())等价于voidfun( int (*test)())\n\n##  如何返回一个数组\n\n用结构体包装一下\n```c\n#include <stdio.h>\n  \n#define MAXNUM 1000\n  \nstruct Array\n{\n    int a[MAXNUM];\n};\n  \nstruct Array DoubleIt(struct Array x)\n{\n    struct Array y;\n    for (int i = 0; i < MAXNUM; ++i)\n    {\n        y.a[i] = (x.a[i] << 1); //移位运算符的优先级非常低，应该在可能的情况下加上括号\n    }\n    return y;\n}\n  \nint main()\n{\n    struct Array a = {1, 2, 3, 4, 5};\n    struct Array b = DoubleIt(a);\n    for (int i = 0; i < 5; ++i)\n    {\n        printf(\"%d\\n\", b.a[i]);\n    }\n}\n  \n```\n\n## 推荐阅读书目：\n《C专家编程》\n《C陷阱与缺陷》\n《征服C指针》\n以上三本在图书馆应该都能借到，特别推荐《征服C指针》，是日本最受欢迎的C语言书籍之一，写的很好\n\n# C学习经验\n\n1. 多写一些简单的程序做实验，验证自己的想法。从实践中学习。\n2. 多写代码，多写代码，多写代码。\n3. 找一些好书看，不要看谭浩强啥的。。 比如《C与指针》，《C专家编程》，《C陷阱与缺陷》，《明解C指针》。\n4. 学会使用搜索引擎。\n5. 不要害怕写代码，其实真的不难。。这个属于技术活，写的越多越熟练。\n6. C其实是比较偏向底层的语言，如果有对于计算机硬件底层相关的知识可能会更好理解。\n","source":"_posts/C-Hello-World-Again.md","raw":"---\ntitle: C Hello World Again\ndate: 2021-01-02\ntag: \n- C\ncategory: C\nmathjax: false\n---\n\n本文是我给地空学院的学生的C语言讲座的讲稿\n\n<!--more-->\n\n#  Hello World Again\n\n[TOC]\n\n##  指针与数组\n\n`a[i]=*(a+i)=i[a]`\n\n`int (*x)[10]`与`int *x[10]`的区别\n前者是指向一个长度为10的整型数组的**指针**\n后者是一个长度为10的(指向整型变量的指针)的**数组**\n\n指针与数组的互换\n```c\nfor(int i=0;i<10;++i)\n{\n    a[i]=0;\n}\n  \nfor (int *p = a; p != (a + 10); ++p)\n{\n    printf(\"%d\\n\", *p);\n}\n  \n```\n##  C风格的字符串处理\n\n###  字符串的表示\n\n```c\nchar s[100]=\"Hello\";\n```\n```c\nchar *s=\"Hello\";\n// 这是一个特殊的行为\n// 注意到int *x=2是完全错误的\n// 但这个语句是对的\n// 编译器会开辟一块内存来存放\"Hello\"并用s指向它\n// 但注意：这个\"Hello\"是不可更改的\n// 例如下面的语句会出现错误\ns[1]='a';\n```\n\n```c\nprintf(\"%c\\n\", \"abc\"[2]);//输出c\nprintf(\"%s\\n\", \"abc\"+1); //输出bc\n//此处的\"abc\"会被解释为指向char数组{'a','b','c','\\0'}的指针\n```\n\n```c\nchar s[100]={'a','b','c'};\n```\n```c\nchar *s = (char *)malloc(sizeof(char) * 10);\n*s++ = 'a';\n*s++ = 'b';\n*s++ = 'c';\nprintf(\"%s\", s - 2); //输出bc\nprintf(\"%s\", s - 1); //输出c\nfree(s - 3); //释放掉用malloc申请的内存\n  \n```\n###  字符串拷贝\n\n```c\nvoid strcpy1(char *a, char *b) //把b赋给a\n{\n    while (*b)\n    {\n        *a++ = *b++;\n    }\n    while (*a)\n    {\n        *a++ = '\\0';\n    }\n}\n  \nint main()\n{\n    char a[100];\n    char b[100];\n    while (1)\n    {\n        scanf(\"%s\", b);\n        strcpy1(a, b);\n        printf(\"%s\\n\", a);\n    }\n}\n```\n\n##  求值顺序\n\n```c\nprintf(\"%c%c%c\\n\",getchar(),getchar(),getchar());\n```\n该语句在gcc编译器下的作用是：读入三个字符并倒序输出。\n因为gcc编译器的实现方法是从右向左求值\n\n##  变量作用域\n\n\n```c\n{\n    int x=2;\n}\nprintf(\"%d\",x); //不会输出\n```\n\n```c\nint x=8;\n{\n    int x=3;\n    printf(\"%d\",x);// 输出3\n}\n```\n\n  \n\n##  用宏实现max函数\n\n\n`#define  MAX(x,y)  x > y ? x : y`\n但考虑`MAX(1!=2,3)为1 != 2 > 3 ? 1 != 2 : 3`\n由于`!=`的优先级小于`>`\n因此上式为`1 != (2>3) ? 1!=2 : 3`\n为`(1 != 0) ? 1!=2 : 3`\n为`1 ? 1 : 3`\n为`1`\n而该式应该是MAX(1,3)=3\n因此加括号为\n`#define  MAX(x,y)  (x) > (y) ? (x) : (y)`\n但考虑`3+ MAX(1,2)`\n为`3 + 1 > 2 ? 1 : 2`\n为`4 > 2 ? 1 : 2`\n为`1 ? 1 : 2`\n为`1`\n而实际上应该是5\n因此我们继续修改这个宏\n`#define MAX(x,y) ((x) > (y) ? (x) : (y))`\n但考虑`MAX(i++,j++)`\n展开后为`i++ > j++ ? i++ : j++`\n这会使得i与j都自增两次\n为此考虑这么定义宏\n```c\n#define MAX(x,y)({     \\\n    int _x = x;        \\\n    int _y = y;        \\\n    _x > _y ? _x : _y; \\\n})\n```\n该宏会重新定义两个变量_x与_y来进行比较，从而使得MAX(i++,j++)符合要求。\n\n  \n\n##  函数与数组的相似点与共同点\n\n相似点：\n数组声明：int x[10]\n函数声明：int sum(int,int)\n数组类型：int [10]\n函数类型：int (int,int)\n数组指针：int (*x)[10]\n函数指针：int (*sum)(int,int)\n数组指针类型：int (*)[10]\n函数指针类型：int (*)(int,int)\n\n数组、函数共同点：\n1.数组、函数都不可拷贝。\n\n2.因为第1点，数组、函数不可以做函数的返回值，但函数可以返回数组的指针或函数的指针。\n\n3.数组、函数可用于函数形参，但因为第1点，编译器会对其做处理。如果形参类型为数组，实际形参类型会转换成元素类型的指针，例如voidfun(int arr[5])等价于void fun(int arr*)。如果形参类型为函数，实际形参类型会转换成对应的函数指针类型，例如void fun (int test())等价于voidfun( int (*test)())\n\n##  如何返回一个数组\n\n用结构体包装一下\n```c\n#include <stdio.h>\n  \n#define MAXNUM 1000\n  \nstruct Array\n{\n    int a[MAXNUM];\n};\n  \nstruct Array DoubleIt(struct Array x)\n{\n    struct Array y;\n    for (int i = 0; i < MAXNUM; ++i)\n    {\n        y.a[i] = (x.a[i] << 1); //移位运算符的优先级非常低，应该在可能的情况下加上括号\n    }\n    return y;\n}\n  \nint main()\n{\n    struct Array a = {1, 2, 3, 4, 5};\n    struct Array b = DoubleIt(a);\n    for (int i = 0; i < 5; ++i)\n    {\n        printf(\"%d\\n\", b.a[i]);\n    }\n}\n  \n```\n\n## 推荐阅读书目：\n《C专家编程》\n《C陷阱与缺陷》\n《征服C指针》\n以上三本在图书馆应该都能借到，特别推荐《征服C指针》，是日本最受欢迎的C语言书籍之一，写的很好\n\n# C学习经验\n\n1. 多写一些简单的程序做实验，验证自己的想法。从实践中学习。\n2. 多写代码，多写代码，多写代码。\n3. 找一些好书看，不要看谭浩强啥的。。 比如《C与指针》，《C专家编程》，《C陷阱与缺陷》，《明解C指针》。\n4. 学会使用搜索引擎。\n5. 不要害怕写代码，其实真的不难。。这个属于技术活，写的越多越熟练。\n6. C其实是比较偏向底层的语言，如果有对于计算机硬件底层相关的知识可能会更好理解。\n","slug":"C-Hello-World-Again","published":1,"updated":"2021-02-13T13:16:40.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc930003bh8y9zv30rxk","content":"<p>本文是我给地空学院的学生的C语言讲座的讲稿</p>\n<a id=\"more\"></a>\n<h1 id=\"Hello-World-Again\"><a href=\"#Hello-World-Again\" class=\"headerlink\" title=\"Hello World Again\"></a>Hello World Again</h1><p>[TOC]</p>\n<h2 id=\"指针与数组\"><a href=\"#指针与数组\" class=\"headerlink\" title=\"指针与数组\"></a>指针与数组</h2><p><code>a[i]=*(a+i)=i[a]</code></p>\n<p><code>int (*x)[10]</code>与<code>int *x[10]</code>的区别<br>前者是指向一个长度为10的整型数组的<strong>指针</strong><br>后者是一个长度为10的(指向整型变量的指针)的<strong>数组</strong></p>\n<p>指针与数组的互换<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> *p = a; p != (a + <span class=\"number\">10</span>); ++p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, *p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C风格的字符串处理\"><a href=\"#C风格的字符串处理\" class=\"headerlink\" title=\"C风格的字符串处理\"></a>C风格的字符串处理</h2><h3 id=\"字符串的表示\"><a href=\"#字符串的表示\" class=\"headerlink\" title=\"字符串的表示\"></a>字符串的表示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100</span>]=<span class=\"string\">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *s=<span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这是一个特殊的行为</span></span><br><span class=\"line\"><span class=\"comment\">// 注意到int *x=2是完全错误的</span></span><br><span class=\"line\"><span class=\"comment\">// 但这个语句是对的</span></span><br><span class=\"line\"><span class=\"comment\">// 编译器会开辟一块内存来存放&quot;Hello&quot;并用s指向它</span></span><br><span class=\"line\"><span class=\"comment\">// 但注意：这个&quot;Hello&quot;是不可更改的</span></span><br><span class=\"line\"><span class=\"comment\">// 例如下面的语句会出现错误</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>]=<span class=\"string\">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>[<span class=\"number\">2</span>]);<span class=\"comment\">//输出c</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>+<span class=\"number\">1</span>); <span class=\"comment\">//输出bc</span></span><br><span class=\"line\"><span class=\"comment\">//此处的&quot;abc&quot;会被解释为指向char数组&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;\\0&#x27;&#125;的指针</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100</span>]=&#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *s = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s - <span class=\"number\">2</span>); <span class=\"comment\">//输出bc</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s - <span class=\"number\">1</span>); <span class=\"comment\">//输出c</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(s - <span class=\"number\">3</span>); <span class=\"comment\">//释放掉用malloc申请的内存</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拷贝\"><a href=\"#字符串拷贝\" class=\"headerlink\" title=\"字符串拷贝\"></a>字符串拷贝</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">strcpy1</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">char</span> *b)</span> <span class=\"comment\">//把b赋给a</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *a++ = *b++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *a++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> b[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, b);</span><br><span class=\"line\">        strcpy1(a, b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"求值顺序\"><a href=\"#求值顺序\" class=\"headerlink\" title=\"求值顺序\"></a>求值顺序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c%c%c\\n&quot;</span>,getchar(),getchar(),getchar());</span><br></pre></td></tr></table></figure>\n<p>该语句在gcc编译器下的作用是：读入三个字符并倒序输出。<br>因为gcc编译器的实现方法是从右向左求值</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,x); <span class=\"comment\">//不会输出</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x=<span class=\"number\">8</span>;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,x);<span class=\"comment\">// 输出3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用宏实现max函数\"><a href=\"#用宏实现max函数\" class=\"headerlink\" title=\"用宏实现max函数\"></a>用宏实现max函数</h2><p><code>#define  MAX(x,y)  x &gt; y ? x : y</code><br>但考虑<code>MAX(1!=2,3)为1 != 2 &gt; 3 ? 1 != 2 : 3</code><br>由于<code>!=</code>的优先级小于<code>&gt;</code><br>因此上式为<code>1 != (2&gt;3) ? 1!=2 : 3</code><br>为<code>(1 != 0) ? 1!=2 : 3</code><br>为<code>1 ? 1 : 3</code><br>为<code>1</code><br>而该式应该是MAX(1,3)=3<br>因此加括号为<br><code>#define  MAX(x,y)  (x) &gt; (y) ? (x) : (y)</code><br>但考虑<code>3+ MAX(1,2)</code><br>为<code>3 + 1 &gt; 2 ? 1 : 2</code><br>为<code>4 &gt; 2 ? 1 : 2</code><br>为<code>1 ? 1 : 2</code><br>为<code>1</code><br>而实际上应该是5<br>因此我们继续修改这个宏<br><code>#define MAX(x,y) ((x) &gt; (y) ? (x) : (y))</code><br>但考虑<code>MAX(i++,j++)</code><br>展开后为<code>i++ &gt; j++ ? i++ : j++</code><br>这会使得i与j都自增两次<br>为此考虑这么定义宏<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y)(&#123;     \\</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _x = x;        \\</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _y = y;        \\</span><br><span class=\"line\">    _x &gt; _y ? _x : _y; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>该宏会重新定义两个变量_x与_y来进行比较，从而使得MAX(i++,j++)符合要求。</p>\n<h2 id=\"函数与数组的相似点与共同点\"><a href=\"#函数与数组的相似点与共同点\" class=\"headerlink\" title=\"函数与数组的相似点与共同点\"></a>函数与数组的相似点与共同点</h2><p>相似点：<br>数组声明：int x[10]<br>函数声明：int sum(int,int)<br>数组类型：int [10]<br>函数类型：int (int,int)<br>数组指针：int (<em>x)[10]<br>函数指针：int (</em>sum)(int,int)<br>数组指针类型：int (<em>)[10]<br>函数指针类型：int (</em>)(int,int)</p>\n<p>数组、函数共同点：<br>1.数组、函数都不可拷贝。</p>\n<p>2.因为第1点，数组、函数不可以做函数的返回值，但函数可以返回数组的指针或函数的指针。</p>\n<p>3.数组、函数可用于函数形参，但因为第1点，编译器会对其做处理。如果形参类型为数组，实际形参类型会转换成元素类型的指针，例如voidfun(int arr[5])等价于void fun(int arr<em>)。如果形参类型为函数，实际形参类型会转换成对应的函数指针类型，例如void fun (int test())等价于voidfun( int (</em>test)())</p>\n<h2 id=\"如何返回一个数组\"><a href=\"#如何返回一个数组\" class=\"headerlink\" title=\"如何返回一个数组\"></a>如何返回一个数组</h2><p>用结构体包装一下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXNUM 1000</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[MAXNUM];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">struct Array <span class=\"title\">DoubleIt</span><span class=\"params\">(struct Array x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">y</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXNUM; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y.a[i] = (x.a[i] &lt;&lt; <span class=\"number\">1</span>); <span class=\"comment\">//移位运算符的优先级非常低，应该在可能的情况下加上括号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">a</span> =</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">b</span> =</span> DoubleIt(a);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, b.a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"推荐阅读书目：\"><a href=\"#推荐阅读书目：\" class=\"headerlink\" title=\"推荐阅读书目：\"></a>推荐阅读书目：</h2><p>《C专家编程》<br>《C陷阱与缺陷》<br>《征服C指针》<br>以上三本在图书馆应该都能借到，特别推荐《征服C指针》，是日本最受欢迎的C语言书籍之一，写的很好</p>\n<h1 id=\"C学习经验\"><a href=\"#C学习经验\" class=\"headerlink\" title=\"C学习经验\"></a>C学习经验</h1><ol>\n<li>多写一些简单的程序做实验，验证自己的想法。从实践中学习。</li>\n<li>多写代码，多写代码，多写代码。</li>\n<li>找一些好书看，不要看谭浩强啥的。。 比如《C与指针》，《C专家编程》，《C陷阱与缺陷》，《明解C指针》。</li>\n<li>学会使用搜索引擎。</li>\n<li>不要害怕写代码，其实真的不难。。这个属于技术活，写的越多越熟练。</li>\n<li>C其实是比较偏向底层的语言，如果有对于计算机硬件底层相关的知识可能会更好理解。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>本文是我给地空学院的学生的C语言讲座的讲稿</p>","more":"<h1 id=\"Hello-World-Again\"><a href=\"#Hello-World-Again\" class=\"headerlink\" title=\"Hello World Again\"></a>Hello World Again</h1><p>[TOC]</p>\n<h2 id=\"指针与数组\"><a href=\"#指针与数组\" class=\"headerlink\" title=\"指针与数组\"></a>指针与数组</h2><p><code>a[i]=*(a+i)=i[a]</code></p>\n<p><code>int (*x)[10]</code>与<code>int *x[10]</code>的区别<br>前者是指向一个长度为10的整型数组的<strong>指针</strong><br>后者是一个长度为10的(指向整型变量的指针)的<strong>数组</strong></p>\n<p>指针与数组的互换<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> *p = a; p != (a + <span class=\"number\">10</span>); ++p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, *p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C风格的字符串处理\"><a href=\"#C风格的字符串处理\" class=\"headerlink\" title=\"C风格的字符串处理\"></a>C风格的字符串处理</h2><h3 id=\"字符串的表示\"><a href=\"#字符串的表示\" class=\"headerlink\" title=\"字符串的表示\"></a>字符串的表示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100</span>]=<span class=\"string\">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *s=<span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这是一个特殊的行为</span></span><br><span class=\"line\"><span class=\"comment\">// 注意到int *x=2是完全错误的</span></span><br><span class=\"line\"><span class=\"comment\">// 但这个语句是对的</span></span><br><span class=\"line\"><span class=\"comment\">// 编译器会开辟一块内存来存放&quot;Hello&quot;并用s指向它</span></span><br><span class=\"line\"><span class=\"comment\">// 但注意：这个&quot;Hello&quot;是不可更改的</span></span><br><span class=\"line\"><span class=\"comment\">// 例如下面的语句会出现错误</span></span><br><span class=\"line\">s[<span class=\"number\">1</span>]=<span class=\"string\">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c\\n&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>[<span class=\"number\">2</span>]);<span class=\"comment\">//输出c</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>+<span class=\"number\">1</span>); <span class=\"comment\">//输出bc</span></span><br><span class=\"line\"><span class=\"comment\">//此处的&quot;abc&quot;会被解释为指向char数组&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;\\0&#x27;&#125;的指针</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">100</span>]=&#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *s = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;b&#x27;</span>;</span><br><span class=\"line\">*s++ = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s - <span class=\"number\">2</span>); <span class=\"comment\">//输出bc</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s - <span class=\"number\">1</span>); <span class=\"comment\">//输出c</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(s - <span class=\"number\">3</span>); <span class=\"comment\">//释放掉用malloc申请的内存</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串拷贝\"><a href=\"#字符串拷贝\" class=\"headerlink\" title=\"字符串拷贝\"></a>字符串拷贝</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">strcpy1</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">char</span> *b)</span> <span class=\"comment\">//把b赋给a</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *a++ = *b++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *a++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> b[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, b);</span><br><span class=\"line\">        strcpy1(a, b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"求值顺序\"><a href=\"#求值顺序\" class=\"headerlink\" title=\"求值顺序\"></a>求值顺序</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c%c%c\\n&quot;</span>,getchar(),getchar(),getchar());</span><br></pre></td></tr></table></figure>\n<p>该语句在gcc编译器下的作用是：读入三个字符并倒序输出。<br>因为gcc编译器的实现方法是从右向左求值</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,x); <span class=\"comment\">//不会输出</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x=<span class=\"number\">8</span>;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,x);<span class=\"comment\">// 输出3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用宏实现max函数\"><a href=\"#用宏实现max函数\" class=\"headerlink\" title=\"用宏实现max函数\"></a>用宏实现max函数</h2><p><code>#define  MAX(x,y)  x &gt; y ? x : y</code><br>但考虑<code>MAX(1!=2,3)为1 != 2 &gt; 3 ? 1 != 2 : 3</code><br>由于<code>!=</code>的优先级小于<code>&gt;</code><br>因此上式为<code>1 != (2&gt;3) ? 1!=2 : 3</code><br>为<code>(1 != 0) ? 1!=2 : 3</code><br>为<code>1 ? 1 : 3</code><br>为<code>1</code><br>而该式应该是MAX(1,3)=3<br>因此加括号为<br><code>#define  MAX(x,y)  (x) &gt; (y) ? (x) : (y)</code><br>但考虑<code>3+ MAX(1,2)</code><br>为<code>3 + 1 &gt; 2 ? 1 : 2</code><br>为<code>4 &gt; 2 ? 1 : 2</code><br>为<code>1 ? 1 : 2</code><br>为<code>1</code><br>而实际上应该是5<br>因此我们继续修改这个宏<br><code>#define MAX(x,y) ((x) &gt; (y) ? (x) : (y))</code><br>但考虑<code>MAX(i++,j++)</code><br>展开后为<code>i++ &gt; j++ ? i++ : j++</code><br>这会使得i与j都自增两次<br>为此考虑这么定义宏<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX(x,y)(&#123;     \\</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> _x = x;        \\</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _y = y;        \\</span><br><span class=\"line\">    _x &gt; _y ? _x : _y; \\</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>该宏会重新定义两个变量_x与_y来进行比较，从而使得MAX(i++,j++)符合要求。</p>\n<h2 id=\"函数与数组的相似点与共同点\"><a href=\"#函数与数组的相似点与共同点\" class=\"headerlink\" title=\"函数与数组的相似点与共同点\"></a>函数与数组的相似点与共同点</h2><p>相似点：<br>数组声明：int x[10]<br>函数声明：int sum(int,int)<br>数组类型：int [10]<br>函数类型：int (int,int)<br>数组指针：int (<em>x)[10]<br>函数指针：int (</em>sum)(int,int)<br>数组指针类型：int (<em>)[10]<br>函数指针类型：int (</em>)(int,int)</p>\n<p>数组、函数共同点：<br>1.数组、函数都不可拷贝。</p>\n<p>2.因为第1点，数组、函数不可以做函数的返回值，但函数可以返回数组的指针或函数的指针。</p>\n<p>3.数组、函数可用于函数形参，但因为第1点，编译器会对其做处理。如果形参类型为数组，实际形参类型会转换成元素类型的指针，例如voidfun(int arr[5])等价于void fun(int arr<em>)。如果形参类型为函数，实际形参类型会转换成对应的函数指针类型，例如void fun (int test())等价于voidfun( int (</em>test)())</p>\n<h2 id=\"如何返回一个数组\"><a href=\"#如何返回一个数组\" class=\"headerlink\" title=\"如何返回一个数组\"></a>如何返回一个数组</h2><p>用结构体包装一下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXNUM 1000</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[MAXNUM];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">struct Array <span class=\"title\">DoubleIt</span><span class=\"params\">(struct Array x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">y</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAXNUM; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y.a[i] = (x.a[i] &lt;&lt; <span class=\"number\">1</span>); <span class=\"comment\">//移位运算符的优先级非常低，应该在可能的情况下加上括号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">a</span> =</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Array</span> <span class=\"title\">b</span> =</span> DoubleIt(a);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, b.a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"推荐阅读书目：\"><a href=\"#推荐阅读书目：\" class=\"headerlink\" title=\"推荐阅读书目：\"></a>推荐阅读书目：</h2><p>《C专家编程》<br>《C陷阱与缺陷》<br>《征服C指针》<br>以上三本在图书馆应该都能借到，特别推荐《征服C指针》，是日本最受欢迎的C语言书籍之一，写的很好</p>\n<h1 id=\"C学习经验\"><a href=\"#C学习经验\" class=\"headerlink\" title=\"C学习经验\"></a>C学习经验</h1><ol>\n<li>多写一些简单的程序做实验，验证自己的想法。从实践中学习。</li>\n<li>多写代码，多写代码，多写代码。</li>\n<li>找一些好书看，不要看谭浩强啥的。。 比如《C与指针》，《C专家编程》，《C陷阱与缺陷》，《明解C指针》。</li>\n<li>学会使用搜索引擎。</li>\n<li>不要害怕写代码，其实真的不难。。这个属于技术活，写的越多越熟练。</li>\n<li>C其实是比较偏向底层的语言，如果有对于计算机硬件底层相关的知识可能会更好理解。</li>\n</ol>"},{"title":"N queens Problem","date":"2020-12-26T16:00:00.000Z","mathjax":false,"_content":"\nThis article will provide a fast way to find a solution for the famous N queens problem.\n<!--more-->\nNote: we only try to find one possibility of all positions of chesses, NOT (ALL posibilities).\n\nFor example, when N=8, there are 92 ways to put the chesses. However, our algorithm just focus on finding one of these 92 ways.\n\nIf you still feels not familar with the problem we will solve. Please Google 8 queens problem and look down. \n\n### N=4\nWhen N=4, there are only two ways to put these chesses.\n\n\n```C First\n0100\n0001\n1000\n0010\n```\n\n```C Second\n0010\n1000\n0001\n0100\n```\n\nOur program, as I just said, will try to find one of the two ways.\n\nSo, Here we go~\n## Code\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n#define N 123456789\n\n\n// 最大能运行多少个皇后\n\nint output_ok;\n\nvoid swap_int(int *p, int *q)\n{\n    int temp;\n    temp = *(p);\n    *(p) = *(q);\n    *(q) = temp;\n}\n\nint swap_ok, change_of_collisions, temp, n;\n// swap_ok判断是否交换两个皇后会使得collisions减小\n// change_of_collisions计算交换前后的collisions的变化量\n// temp用作交换两个变量的临时变量\n// n为皇后数目\n\nvoid print_solve1(int *x, int n, FILE *fp) // 传入queen,n和fp\n// 输出形象化的棋盘\n// *代表皇后 -代表棋盘\n{\n    fprintf(fp, \"\\nBEGIN\\n\");\n    for (int i = 1; i <= n; ++i)\n    {\n        for (int j = 1; j <= n; ++j)\n        {\n            if (j == x[i])\n            {\n                fprintf(fp, \"*\");\n            }\n            else\n            {\n                fprintf(fp, \"-\");\n            }\n        }\n        fprintf(fp, \"\\n\");\n    }\n    fprintf(fp, \"\\nEND\\n\\n\\n\");\n}\n\nvoid print_solve(int *x, int n, FILE *fp) // 传入queen,n,fp\n// 输出皇后数列到文件n-queens-out.txt\n{\n    fprintf(fp, \"%d\\n\", n);\n    for (int i = 1; i <= n; ++i)\n    {\n        fprintf(fp, \"%d \", x[i]);\n    }\n    if (n <= 20)\n    {\n        print_solve1(x, n, fp);\n    }\n}\n\nint main()\n{\n    FILE *fp = fopen(\"n-queens-out.txt\", \"w\");\n\n    int n;\n    // n皇后\n    printf(\"@Author: ZhangJia\\n\");\n    printf(\"@university: SCGY of USTC\\n\");\n    printf(\"@Github: Oyyko\\n\");\n    printf(\"\\n\");\n    printf(\"\\n\");\n    printf(\"Please Input the number N where the board is N*N.\\n\");\n    printf(\"which means we will have N queens\\n\");\n    scanf(\"%d\", &n);\n\n    printf(\"Do you want to output to\\\"n-queens-out.txt\\\"\\n\");\n    printf(\"input 1 as yes ,other character as no\\n\");\n    scanf(\"%d\", &output_ok);\n    if (output_ok != 1)\n    {\n        output_ok = 0;\n    }\n    printf(\"\\nProgram START\\n\");\n\n    clock_t start, end;\n    //用于记录时间\n\n    int *pre_queen = (int *)malloc(sizeof(int) * N);\n    int *pre_dn = (int *)malloc(sizeof(int) * (2 * N - 1));\n    int *pre_dp = (int *)malloc(sizeof(int) * (2 * N - 1));\n    int *pre_attack = (int *)malloc(sizeof(int) * N);\n\n    int *queen = pre_queen - 1;\n    int *dn = pre_dn - 2;\n    int *dp = pre_dp - 1 + n;\n    int *attack = pre_attack - 1;\n    // 四个pre数组开辟空间\n    // 之后由对应的指针指向它们中间的位置\n    // 从而满足算法运行对数组下标的要求(即可能会出现负的下标)\n    // 例如 queen[1] = pre_queen[0]\n    // 例如 queen[m] = pre_queen[m-1]\n    // 例如 dn[m]    = pre_dn[m-2]\n    // 例如 dp[m]    = pre_dp[m+n-1]\n    // 例如 dp[-2]   = pre_dp[-2+n-1]\n\n    // 数列queen[i]=j 表示第i行的皇后在第j列\n    // 数列dn[i]=k 表示斜率为负的对角线中编号为i的对角线上有k个皇后\n    // 数列dp[i]=k 表示斜率为正的对角线中编号为i的对角线上有k个皇后\n    // dn,dp的编号方法分别为(列号+行号),(列号-行号)\n    // 数列attack[i]=j 表示第i个被攻击的皇后在queen中的序号为j\n\n    memset(pre_dn, 0, sizeof(int) * (2 * n - 1));\n    memset(pre_dp, 0, sizeof(int) * (2 * n - 1));\n\n    int limit, collisions, number_of_attacks, loopcount;\n\n    collisions = 1;\n    start = clock();\n\n    while (collisions)\n    // 当评估函数为0时，不断执行，直到评估函数为0\n    // 评估函数为0也就是找到一组解\n    {\n        memset(pre_dn, 0, sizeof(int) * (2 * n - 1));\n        memset(pre_dp, 0, sizeof(int) * (2 * n - 1));\n        collisions = 0;\n\n        for (int i = 0; i <= n - 1; ++i)\n        {\n            pre_queen[i] = i + 1;\n        }\n        int Search_Max = (n << 2);\n        size_t x = -1;\n        x = (x >> 1);\n        int i, j;\n        int m;\n        int rand_max = n;\n        size_t rand_seed;\n        rand_seed = (size_t)time(NULL);\n        for (i = 1, j = 1; i <= Search_Max && j <= n; ++i)\n        {\n            // 我们的目标是在初始化阶段生成一个很好的初态\n            // 这样我们就能很快的爬山找到最优解\n            // 因为初态的collisions已经很小\n            // 因此爬山的过程会大幅度缩短\n            // 优化的方法就是在初始化的时候就尽可能的避免碰撞\n            // j的作用是衡量已经有多少个皇后被优化处理了,如果优化了n个,那么说明该停止优化了\n            // i的作用是限制优化阶段所采用的时间 每循环一次i就自加1\n            // 当i大于Search_Max的时候,强制退出优化过程\n            rand_seed *= 1103515245;\n            rand_seed += 12345;\n            rand_seed = rand_seed % (x + 1);\n            // LCG随机数生成器\n            // X(n+1) = (a * X(n) + c) % m\n            // 此处我采用a等于1103515245 c等于12345 的参数取法\n            // 该取法为gcc编译器的参数取值\n            // 为了合理的取值范围我采用了size_t类型\n            // 实际上就是生成一个 0~x的随机数\n\n            m = rand_max * ((double)rand_seed / (double)x) + j;\n            // m为 j~n之间的一个随机数\n            if (!(dn[queen[m] + j]) && !(dp[queen[m] - j]))\n            // 如果 皇后m 与 皇后j 交换可以减小评估函数的值\n            // 那么就交换m与j\n            {\n                swap_int(&queen[m], &queen[j]);\n                ++dn[queen[j] + j];\n                ++dp[queen[j] - j];\n                ++j;\n                --rand_max;\n            }\n        }\n        // 在优化完了j个皇后之后\n        // 打乱剩下的皇后,以使得初态更加平均\n        // 同时计算出所有dn与dp的值\n        for (i = j; i <= n; ++i)\n        {\n            m = rand() % rand_max + i;\n            swap_int(&queen[m], &queen[i]);\n            ++dn[queen[i] + i];\n            ++dp[queen[i] - i];\n            --rand_max;\n        }\n        // 以上完成了对整个棋盘的初始化\n\n        for (int i = 2; i <= 2 * n; ++i)\n        {\n            if (dn[i] > 1)\n                collisions += (dn[i] - 1);\n        }\n        for (int i = 1 - n; i <= n - 1; ++i)\n        {\n            if (dp[i] > 1)\n                collisions += (dp[i] - 1);\n        }\n        if (!collisions)\n        // 若恰好生成了满足要求的皇后排列,则输出答案并且结束程序\n        {\n            end = clock();\n            printf(\"It takes %f seconds to find a solotion\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n            print_solve(queen, n, fp);\n            exit(0);\n        }\n\n        limit = collisions >> 1; // means limit=0.5*collisions\n                                 // limit的作用是评估何时适合重新计算attack数组，从而达到更快的运行速度。\n                                 // 如果每次交换都重新计算attack数组,那么开销过大.\n                                 // 为此我们采用设置阈值的方法\n                                 // 仅当collision<limit时，才重新计算attack。从而减小了不必要的损耗\n\n        // compute attack START\n\n        number_of_attacks = 0;\n        int k = 1;\n        for (int i = 1; i <= n; ++i)\n        {\n            if (dn[queen[i] + i] > 1 || dp[queen[i] - i] > 1)\n            {\n                attack[k++] = i;\n                ++number_of_attacks;\n            }\n        }\n        //compute attack END\n\n        loopcount = 0;\n        // loopcount用来判断何时随机重启\n        // 每次爬山都会增加loopcount的值\n        // 当loopcount比较大时,说明爬山法陷入了局部困境,需要进行随机重启\n\n        // Initialization END\n        // 初始化过程结束,下面开始爬山算法\n\n        while (loopcount < (n << 5))\n        {\n            for (int k = 1; k <= number_of_attacks; ++k)\n            {\n                int i = attack[k];\n                int j = ((rand() << 6) + rand()) % (n) + 1;\n                // 取一个被攻击的皇后和一个随机取得皇后,观察是否可以交换\n\n                swap_ok = 0;\n                change_of_collisions = 0;\n\n                change_of_collisions -= (dp[queen[i] - i] > 1);\n                change_of_collisions -= (dp[queen[j] - j] > 1);\n                change_of_collisions -= (dn[queen[i] + i] > 1);\n                change_of_collisions -= (dn[queen[j] + j] > 1);\n\n                change_of_collisions += (dn[queen[j] + i] >= 1);\n                change_of_collisions += (dn[queen[i] + j] >= 1);\n                change_of_collisions += (dp[queen[j] - i] >= 1);\n                change_of_collisions += (dp[queen[i] - j] >= 1);\n                // 计算评估函数的改变量\n                if (change_of_collisions < 0)\n                {\n                    if (!(queen[i] + i - queen[j] - j) && !(dp[queen[i] - j]))\n                    {\n                        change_of_collisions += 2;\n                    }\n                    if (!(queen[i] - i - queen[j] + j) && !(dn[queen[i] + j]))\n                    {\n                        change_of_collisions += 2;\n                    }\n                    if (change_of_collisions < 0)\n                    {\n                        // perform swap\n                        // 若改变量小于0,则执行交换\n                        --dn[queen[i] + i];\n                        --dp[queen[i] - i];\n                        --dn[queen[j] + j];\n                        --dp[queen[j] - j];\n                        ++dn[queen[j] + i];\n                        ++dn[queen[i] + j];\n                        ++dp[queen[j] - i];\n                        ++dp[queen[i] - j];\n\n                        temp = queen[j];\n                        queen[j] = queen[i];\n                        queen[i] = temp;\n\n                        collisions += change_of_collisions;\n\n                        if (!collisions)\n                        // 若找到了解,则输出答案并且结束程序\n                        {\n                            end = clock();\n                            printf(\"It takes %f seconds to find a solotion\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n                            printf(\"Press any key to EXIT\\n\");\n                            if (output_ok)\n                                print_solve(queen, n, fp);\n                            getchar();\n                            getchar();\n                            exit(0);\n                        }\n                        if (collisions < limit)\n                        // 当棋盘变动较大时,重新计算attack数列\n                        {\n                            limit = collisions >> 1;\n                            // compute attack\n\n                            number_of_attacks = 0;\n                            int k = 1;\n                            for (int i = 1; i <= n; ++i)\n                            {\n                                if (dn[queen[i] + i] > 1 || dp[queen[i] - i] > 1)\n                                {\n                                    attack[k++] = i;\n                                    ++number_of_attacks;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            loopcount = loopcount + number_of_attacks;\n        }\n    }\n\n    return 0;\n}   \n```","source":"_posts/N-queens.md","raw":"---\ntitle: N queens Problem\ndate: 2020-12-27\ntag: \n- Algorithm \n- C\ncategory: Algorithm\nmathjax: false\n---\n\nThis article will provide a fast way to find a solution for the famous N queens problem.\n<!--more-->\nNote: we only try to find one possibility of all positions of chesses, NOT (ALL posibilities).\n\nFor example, when N=8, there are 92 ways to put the chesses. However, our algorithm just focus on finding one of these 92 ways.\n\nIf you still feels not familar with the problem we will solve. Please Google 8 queens problem and look down. \n\n### N=4\nWhen N=4, there are only two ways to put these chesses.\n\n\n```C First\n0100\n0001\n1000\n0010\n```\n\n```C Second\n0010\n1000\n0001\n0100\n```\n\nOur program, as I just said, will try to find one of the two ways.\n\nSo, Here we go~\n## Code\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n\n#define N 123456789\n\n\n// 最大能运行多少个皇后\n\nint output_ok;\n\nvoid swap_int(int *p, int *q)\n{\n    int temp;\n    temp = *(p);\n    *(p) = *(q);\n    *(q) = temp;\n}\n\nint swap_ok, change_of_collisions, temp, n;\n// swap_ok判断是否交换两个皇后会使得collisions减小\n// change_of_collisions计算交换前后的collisions的变化量\n// temp用作交换两个变量的临时变量\n// n为皇后数目\n\nvoid print_solve1(int *x, int n, FILE *fp) // 传入queen,n和fp\n// 输出形象化的棋盘\n// *代表皇后 -代表棋盘\n{\n    fprintf(fp, \"\\nBEGIN\\n\");\n    for (int i = 1; i <= n; ++i)\n    {\n        for (int j = 1; j <= n; ++j)\n        {\n            if (j == x[i])\n            {\n                fprintf(fp, \"*\");\n            }\n            else\n            {\n                fprintf(fp, \"-\");\n            }\n        }\n        fprintf(fp, \"\\n\");\n    }\n    fprintf(fp, \"\\nEND\\n\\n\\n\");\n}\n\nvoid print_solve(int *x, int n, FILE *fp) // 传入queen,n,fp\n// 输出皇后数列到文件n-queens-out.txt\n{\n    fprintf(fp, \"%d\\n\", n);\n    for (int i = 1; i <= n; ++i)\n    {\n        fprintf(fp, \"%d \", x[i]);\n    }\n    if (n <= 20)\n    {\n        print_solve1(x, n, fp);\n    }\n}\n\nint main()\n{\n    FILE *fp = fopen(\"n-queens-out.txt\", \"w\");\n\n    int n;\n    // n皇后\n    printf(\"@Author: ZhangJia\\n\");\n    printf(\"@university: SCGY of USTC\\n\");\n    printf(\"@Github: Oyyko\\n\");\n    printf(\"\\n\");\n    printf(\"\\n\");\n    printf(\"Please Input the number N where the board is N*N.\\n\");\n    printf(\"which means we will have N queens\\n\");\n    scanf(\"%d\", &n);\n\n    printf(\"Do you want to output to\\\"n-queens-out.txt\\\"\\n\");\n    printf(\"input 1 as yes ,other character as no\\n\");\n    scanf(\"%d\", &output_ok);\n    if (output_ok != 1)\n    {\n        output_ok = 0;\n    }\n    printf(\"\\nProgram START\\n\");\n\n    clock_t start, end;\n    //用于记录时间\n\n    int *pre_queen = (int *)malloc(sizeof(int) * N);\n    int *pre_dn = (int *)malloc(sizeof(int) * (2 * N - 1));\n    int *pre_dp = (int *)malloc(sizeof(int) * (2 * N - 1));\n    int *pre_attack = (int *)malloc(sizeof(int) * N);\n\n    int *queen = pre_queen - 1;\n    int *dn = pre_dn - 2;\n    int *dp = pre_dp - 1 + n;\n    int *attack = pre_attack - 1;\n    // 四个pre数组开辟空间\n    // 之后由对应的指针指向它们中间的位置\n    // 从而满足算法运行对数组下标的要求(即可能会出现负的下标)\n    // 例如 queen[1] = pre_queen[0]\n    // 例如 queen[m] = pre_queen[m-1]\n    // 例如 dn[m]    = pre_dn[m-2]\n    // 例如 dp[m]    = pre_dp[m+n-1]\n    // 例如 dp[-2]   = pre_dp[-2+n-1]\n\n    // 数列queen[i]=j 表示第i行的皇后在第j列\n    // 数列dn[i]=k 表示斜率为负的对角线中编号为i的对角线上有k个皇后\n    // 数列dp[i]=k 表示斜率为正的对角线中编号为i的对角线上有k个皇后\n    // dn,dp的编号方法分别为(列号+行号),(列号-行号)\n    // 数列attack[i]=j 表示第i个被攻击的皇后在queen中的序号为j\n\n    memset(pre_dn, 0, sizeof(int) * (2 * n - 1));\n    memset(pre_dp, 0, sizeof(int) * (2 * n - 1));\n\n    int limit, collisions, number_of_attacks, loopcount;\n\n    collisions = 1;\n    start = clock();\n\n    while (collisions)\n    // 当评估函数为0时，不断执行，直到评估函数为0\n    // 评估函数为0也就是找到一组解\n    {\n        memset(pre_dn, 0, sizeof(int) * (2 * n - 1));\n        memset(pre_dp, 0, sizeof(int) * (2 * n - 1));\n        collisions = 0;\n\n        for (int i = 0; i <= n - 1; ++i)\n        {\n            pre_queen[i] = i + 1;\n        }\n        int Search_Max = (n << 2);\n        size_t x = -1;\n        x = (x >> 1);\n        int i, j;\n        int m;\n        int rand_max = n;\n        size_t rand_seed;\n        rand_seed = (size_t)time(NULL);\n        for (i = 1, j = 1; i <= Search_Max && j <= n; ++i)\n        {\n            // 我们的目标是在初始化阶段生成一个很好的初态\n            // 这样我们就能很快的爬山找到最优解\n            // 因为初态的collisions已经很小\n            // 因此爬山的过程会大幅度缩短\n            // 优化的方法就是在初始化的时候就尽可能的避免碰撞\n            // j的作用是衡量已经有多少个皇后被优化处理了,如果优化了n个,那么说明该停止优化了\n            // i的作用是限制优化阶段所采用的时间 每循环一次i就自加1\n            // 当i大于Search_Max的时候,强制退出优化过程\n            rand_seed *= 1103515245;\n            rand_seed += 12345;\n            rand_seed = rand_seed % (x + 1);\n            // LCG随机数生成器\n            // X(n+1) = (a * X(n) + c) % m\n            // 此处我采用a等于1103515245 c等于12345 的参数取法\n            // 该取法为gcc编译器的参数取值\n            // 为了合理的取值范围我采用了size_t类型\n            // 实际上就是生成一个 0~x的随机数\n\n            m = rand_max * ((double)rand_seed / (double)x) + j;\n            // m为 j~n之间的一个随机数\n            if (!(dn[queen[m] + j]) && !(dp[queen[m] - j]))\n            // 如果 皇后m 与 皇后j 交换可以减小评估函数的值\n            // 那么就交换m与j\n            {\n                swap_int(&queen[m], &queen[j]);\n                ++dn[queen[j] + j];\n                ++dp[queen[j] - j];\n                ++j;\n                --rand_max;\n            }\n        }\n        // 在优化完了j个皇后之后\n        // 打乱剩下的皇后,以使得初态更加平均\n        // 同时计算出所有dn与dp的值\n        for (i = j; i <= n; ++i)\n        {\n            m = rand() % rand_max + i;\n            swap_int(&queen[m], &queen[i]);\n            ++dn[queen[i] + i];\n            ++dp[queen[i] - i];\n            --rand_max;\n        }\n        // 以上完成了对整个棋盘的初始化\n\n        for (int i = 2; i <= 2 * n; ++i)\n        {\n            if (dn[i] > 1)\n                collisions += (dn[i] - 1);\n        }\n        for (int i = 1 - n; i <= n - 1; ++i)\n        {\n            if (dp[i] > 1)\n                collisions += (dp[i] - 1);\n        }\n        if (!collisions)\n        // 若恰好生成了满足要求的皇后排列,则输出答案并且结束程序\n        {\n            end = clock();\n            printf(\"It takes %f seconds to find a solotion\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n            print_solve(queen, n, fp);\n            exit(0);\n        }\n\n        limit = collisions >> 1; // means limit=0.5*collisions\n                                 // limit的作用是评估何时适合重新计算attack数组，从而达到更快的运行速度。\n                                 // 如果每次交换都重新计算attack数组,那么开销过大.\n                                 // 为此我们采用设置阈值的方法\n                                 // 仅当collision<limit时，才重新计算attack。从而减小了不必要的损耗\n\n        // compute attack START\n\n        number_of_attacks = 0;\n        int k = 1;\n        for (int i = 1; i <= n; ++i)\n        {\n            if (dn[queen[i] + i] > 1 || dp[queen[i] - i] > 1)\n            {\n                attack[k++] = i;\n                ++number_of_attacks;\n            }\n        }\n        //compute attack END\n\n        loopcount = 0;\n        // loopcount用来判断何时随机重启\n        // 每次爬山都会增加loopcount的值\n        // 当loopcount比较大时,说明爬山法陷入了局部困境,需要进行随机重启\n\n        // Initialization END\n        // 初始化过程结束,下面开始爬山算法\n\n        while (loopcount < (n << 5))\n        {\n            for (int k = 1; k <= number_of_attacks; ++k)\n            {\n                int i = attack[k];\n                int j = ((rand() << 6) + rand()) % (n) + 1;\n                // 取一个被攻击的皇后和一个随机取得皇后,观察是否可以交换\n\n                swap_ok = 0;\n                change_of_collisions = 0;\n\n                change_of_collisions -= (dp[queen[i] - i] > 1);\n                change_of_collisions -= (dp[queen[j] - j] > 1);\n                change_of_collisions -= (dn[queen[i] + i] > 1);\n                change_of_collisions -= (dn[queen[j] + j] > 1);\n\n                change_of_collisions += (dn[queen[j] + i] >= 1);\n                change_of_collisions += (dn[queen[i] + j] >= 1);\n                change_of_collisions += (dp[queen[j] - i] >= 1);\n                change_of_collisions += (dp[queen[i] - j] >= 1);\n                // 计算评估函数的改变量\n                if (change_of_collisions < 0)\n                {\n                    if (!(queen[i] + i - queen[j] - j) && !(dp[queen[i] - j]))\n                    {\n                        change_of_collisions += 2;\n                    }\n                    if (!(queen[i] - i - queen[j] + j) && !(dn[queen[i] + j]))\n                    {\n                        change_of_collisions += 2;\n                    }\n                    if (change_of_collisions < 0)\n                    {\n                        // perform swap\n                        // 若改变量小于0,则执行交换\n                        --dn[queen[i] + i];\n                        --dp[queen[i] - i];\n                        --dn[queen[j] + j];\n                        --dp[queen[j] - j];\n                        ++dn[queen[j] + i];\n                        ++dn[queen[i] + j];\n                        ++dp[queen[j] - i];\n                        ++dp[queen[i] - j];\n\n                        temp = queen[j];\n                        queen[j] = queen[i];\n                        queen[i] = temp;\n\n                        collisions += change_of_collisions;\n\n                        if (!collisions)\n                        // 若找到了解,则输出答案并且结束程序\n                        {\n                            end = clock();\n                            printf(\"It takes %f seconds to find a solotion\\n\", (double)(end - start) / CLOCKS_PER_SEC);\n                            printf(\"Press any key to EXIT\\n\");\n                            if (output_ok)\n                                print_solve(queen, n, fp);\n                            getchar();\n                            getchar();\n                            exit(0);\n                        }\n                        if (collisions < limit)\n                        // 当棋盘变动较大时,重新计算attack数列\n                        {\n                            limit = collisions >> 1;\n                            // compute attack\n\n                            number_of_attacks = 0;\n                            int k = 1;\n                            for (int i = 1; i <= n; ++i)\n                            {\n                                if (dn[queen[i] + i] > 1 || dp[queen[i] - i] > 1)\n                                {\n                                    attack[k++] = i;\n                                    ++number_of_attacks;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            loopcount = loopcount + number_of_attacks;\n        }\n    }\n\n    return 0;\n}   \n```","slug":"N-queens","published":1,"updated":"2021-01-24T10:38:12.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc960007bh8y5v9l79pe","content":"<p>This article will provide a fast way to find a solution for the famous N queens problem.<br><a id=\"more\"></a><br>Note: we only try to find one possibility of all positions of chesses, NOT (ALL posibilities).</p>\n<p>For example, when N=8, there are 92 ways to put the chesses. However, our algorithm just focus on finding one of these 92 ways.</p>\n<p>If you still feels not familar with the problem we will solve. Please Google 8 queens problem and look down. </p>\n<h3 id=\"N-4\"><a href=\"#N-4\" class=\"headerlink\" title=\"N=4\"></a>N=4</h3><p>When N=4, there are only two ways to put these chesses.</p>\n<figure class=\"highlight c\"><figcaption><span>First</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0100</span></span><br><span class=\"line\"><span class=\"number\">0001</span></span><br><span class=\"line\"><span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">0010</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><figcaption><span>Second</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0010</span></span><br><span class=\"line\"><span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">0001</span></span><br><span class=\"line\"><span class=\"number\">0100</span></span><br></pre></td></tr></table></figure>\n<p>Our program, as I just said, will try to find one of the two ways.</p>\n<p>So, Here we go~</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 123456789</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大能运行多少个皇后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> output_ok;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> *q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    temp = *(p);</span><br><span class=\"line\">    *(p) = *(q);</span><br><span class=\"line\">    *(q) = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> swap_ok, change_of_collisions, temp, n;</span><br><span class=\"line\"><span class=\"comment\">// swap_ok判断是否交换两个皇后会使得collisions减小</span></span><br><span class=\"line\"><span class=\"comment\">// change_of_collisions计算交换前后的collisions的变化量</span></span><br><span class=\"line\"><span class=\"comment\">// temp用作交换两个变量的临时变量</span></span><br><span class=\"line\"><span class=\"comment\">// n为皇后数目</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_solve1</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> n, FILE *fp)</span> <span class=\"comment\">// 传入queen,n和fp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 输出形象化的棋盘</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// *代表皇后 -代表棋盘</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\nBEGIN\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == x[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\nEND\\n\\n\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_solve</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> n, FILE *fp)</span> <span class=\"comment\">// 传入queen,n,fp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 输出皇后数列到文件n-queens-out.txt</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;%d\\n&quot;</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;%d &quot;</span>, x[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print_solve1(x, n, fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;n-queens-out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"comment\">// n皇后</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@Author: ZhangJia\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@university: SCGY of USTC\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@Github: Oyyko\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please Input the number N where the board is N*N.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;which means we will have N queens\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you want to output to\\&quot;n-queens-out.txt\\&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input 1 as yes ,other character as no\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;output_ok);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (output_ok != <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        output_ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\nProgram START\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">clock_t</span> start, end;</span><br><span class=\"line\">    <span class=\"comment\">//用于记录时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_queen = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_dn = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * N - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_dp = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * N - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_attack = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *queen = pre_queen - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *dn = pre_dn - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *dp = pre_dp - <span class=\"number\">1</span> + n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *attack = pre_attack - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 四个pre数组开辟空间</span></span><br><span class=\"line\">    <span class=\"comment\">// 之后由对应的指针指向它们中间的位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 从而满足算法运行对数组下标的要求(即可能会出现负的下标)</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 queen[1] = pre_queen[0]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 queen[m] = pre_queen[m-1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dn[m]    = pre_dn[m-2]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dp[m]    = pre_dp[m+n-1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dp[-2]   = pre_dp[-2+n-1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数列queen[i]=j 表示第i行的皇后在第j列</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列dn[i]=k 表示斜率为负的对角线中编号为i的对角线上有k个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列dp[i]=k 表示斜率为正的对角线中编号为i的对角线上有k个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">// dn,dp的编号方法分别为(列号+行号),(列号-行号)</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列attack[i]=j 表示第i个被攻击的皇后在queen中的序号为j</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre_dn, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre_dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit, collisions, number_of_attacks, loopcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    collisions = <span class=\"number\">1</span>;</span><br><span class=\"line\">    start = clock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (collisions)</span><br><span class=\"line\">    <span class=\"comment\">// 当评估函数为0时，不断执行，直到评估函数为0</span></span><br><span class=\"line\">    <span class=\"comment\">// 评估函数为0也就是找到一组解</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(pre_dn, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(pre_dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">        collisions = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pre_queen[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> Search_Max = (n &lt;&lt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> x = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        x = (x &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rand_max = n;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> rand_seed;</span><br><span class=\"line\">        rand_seed = (<span class=\"keyword\">size_t</span>)time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>; i &lt;= Search_Max &amp;&amp; j &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 我们的目标是在初始化阶段生成一个很好的初态</span></span><br><span class=\"line\">            <span class=\"comment\">// 这样我们就能很快的爬山找到最优解</span></span><br><span class=\"line\">            <span class=\"comment\">// 因为初态的collisions已经很小</span></span><br><span class=\"line\">            <span class=\"comment\">// 因此爬山的过程会大幅度缩短</span></span><br><span class=\"line\">            <span class=\"comment\">// 优化的方法就是在初始化的时候就尽可能的避免碰撞</span></span><br><span class=\"line\">            <span class=\"comment\">// j的作用是衡量已经有多少个皇后被优化处理了,如果优化了n个,那么说明该停止优化了</span></span><br><span class=\"line\">            <span class=\"comment\">// i的作用是限制优化阶段所采用的时间 每循环一次i就自加1</span></span><br><span class=\"line\">            <span class=\"comment\">// 当i大于Search_Max的时候,强制退出优化过程</span></span><br><span class=\"line\">            rand_seed *= <span class=\"number\">1103515245</span>;</span><br><span class=\"line\">            rand_seed += <span class=\"number\">12345</span>;</span><br><span class=\"line\">            rand_seed = rand_seed % (x + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// LCG随机数生成器</span></span><br><span class=\"line\">            <span class=\"comment\">// X(n+1) = (a * X(n) + c) % m</span></span><br><span class=\"line\">            <span class=\"comment\">// 此处我采用a等于1103515245 c等于12345 的参数取法</span></span><br><span class=\"line\">            <span class=\"comment\">// 该取法为gcc编译器的参数取值</span></span><br><span class=\"line\">            <span class=\"comment\">// 为了合理的取值范围我采用了size_t类型</span></span><br><span class=\"line\">            <span class=\"comment\">// 实际上就是生成一个 0~x的随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">            m = rand_max * ((<span class=\"keyword\">double</span>)rand_seed / (<span class=\"keyword\">double</span>)x) + j;</span><br><span class=\"line\">            <span class=\"comment\">// m为 j~n之间的一个随机数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(dn[queen[m] + j]) &amp;&amp; !(dp[queen[m] - j]))</span><br><span class=\"line\">            <span class=\"comment\">// 如果 皇后m 与 皇后j 交换可以减小评估函数的值</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么就交换m与j</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap_int(&amp;queen[m], &amp;queen[j]);</span><br><span class=\"line\">                ++dn[queen[j] + j];</span><br><span class=\"line\">                ++dp[queen[j] - j];</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                --rand_max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在优化完了j个皇后之后</span></span><br><span class=\"line\">        <span class=\"comment\">// 打乱剩下的皇后,以使得初态更加平均</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时计算出所有dn与dp的值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = j; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m = rand() % rand_max + i;</span><br><span class=\"line\">            swap_int(&amp;queen[m], &amp;queen[i]);</span><br><span class=\"line\">            ++dn[queen[i] + i];</span><br><span class=\"line\">            ++dp[queen[i] - i];</span><br><span class=\"line\">            --rand_max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 以上完成了对整个棋盘的初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">2</span> * n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dn[i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                collisions += (dn[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> - n; i &lt;= n - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                collisions += (dp[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!collisions)</span><br><span class=\"line\">        <span class=\"comment\">// 若恰好生成了满足要求的皇后排列,则输出答案并且结束程序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            end = clock();</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;It takes %f seconds to find a solotion\\n&quot;</span>, (<span class=\"keyword\">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class=\"line\">            print_solve(queen, n, fp);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        limit = collisions &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// means limit=0.5*collisions</span></span><br><span class=\"line\">                                 <span class=\"comment\">// limit的作用是评估何时适合重新计算attack数组，从而达到更快的运行速度。</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 如果每次交换都重新计算attack数组,那么开销过大.</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 为此我们采用设置阈值的方法</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 仅当collision&lt;limit时，才重新计算attack。从而减小了不必要的损耗</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// compute attack START</span></span><br><span class=\"line\"></span><br><span class=\"line\">        number_of_attacks = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dn[queen[i] + i] &gt; <span class=\"number\">1</span> || dp[queen[i] - i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                attack[k++] = i;</span><br><span class=\"line\">                ++number_of_attacks;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//compute attack END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loopcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// loopcount用来判断何时随机重启</span></span><br><span class=\"line\">        <span class=\"comment\">// 每次爬山都会增加loopcount的值</span></span><br><span class=\"line\">        <span class=\"comment\">// 当loopcount比较大时,说明爬山法陷入了局部困境,需要进行随机重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Initialization END</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化过程结束,下面开始爬山算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loopcount &lt; (n &lt;&lt; <span class=\"number\">5</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= number_of_attacks; ++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = attack[k];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = ((rand() &lt;&lt; <span class=\"number\">6</span>) + rand()) % (n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 取一个被攻击的皇后和一个随机取得皇后,观察是否可以交换</span></span><br><span class=\"line\"></span><br><span class=\"line\">                swap_ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">                change_of_collisions = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                change_of_collisions -= (dp[queen[i] - i] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dp[queen[j] - j] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dn[queen[i] + i] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dn[queen[j] + j] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                change_of_collisions += (dn[queen[j] + i] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dn[queen[i] + j] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dp[queen[j] - i] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dp[queen[i] - j] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 计算评估函数的改变量</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (change_of_collisions &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(queen[i] + i - queen[j] - j) &amp;&amp; !(dp[queen[i] - j]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        change_of_collisions += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(queen[i] - i - queen[j] + j) &amp;&amp; !(dn[queen[i] + j]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        change_of_collisions += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (change_of_collisions &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// perform swap</span></span><br><span class=\"line\">                        <span class=\"comment\">// 若改变量小于0,则执行交换</span></span><br><span class=\"line\">                        --dn[queen[i] + i];</span><br><span class=\"line\">                        --dp[queen[i] - i];</span><br><span class=\"line\">                        --dn[queen[j] + j];</span><br><span class=\"line\">                        --dp[queen[j] - j];</span><br><span class=\"line\">                        ++dn[queen[j] + i];</span><br><span class=\"line\">                        ++dn[queen[i] + j];</span><br><span class=\"line\">                        ++dp[queen[j] - i];</span><br><span class=\"line\">                        ++dp[queen[i] - j];</span><br><span class=\"line\"></span><br><span class=\"line\">                        temp = queen[j];</span><br><span class=\"line\">                        queen[j] = queen[i];</span><br><span class=\"line\">                        queen[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">                        collisions += change_of_collisions;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!collisions)</span><br><span class=\"line\">                        <span class=\"comment\">// 若找到了解,则输出答案并且结束程序</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            end = clock();</span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;It takes %f seconds to find a solotion\\n&quot;</span>, (<span class=\"keyword\">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Press any key to EXIT\\n&quot;</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (output_ok)</span><br><span class=\"line\">                                print_solve(queen, n, fp);</span><br><span class=\"line\">                            getchar();</span><br><span class=\"line\">                            getchar();</span><br><span class=\"line\">                            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (collisions &lt; limit)</span><br><span class=\"line\">                        <span class=\"comment\">// 当棋盘变动较大时,重新计算attack数列</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            limit = collisions &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"comment\">// compute attack</span></span><br><span class=\"line\"></span><br><span class=\"line\">                            number_of_attacks = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (dn[queen[i] + i] &gt; <span class=\"number\">1</span> || dp[queen[i] - i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    attack[k++] = i;</span><br><span class=\"line\">                                    ++number_of_attacks;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            loopcount = loopcount + number_of_attacks;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>This article will provide a fast way to find a solution for the famous N queens problem.<br>","more":"<br>Note: we only try to find one possibility of all positions of chesses, NOT (ALL posibilities).</p>\n<p>For example, when N=8, there are 92 ways to put the chesses. However, our algorithm just focus on finding one of these 92 ways.</p>\n<p>If you still feels not familar with the problem we will solve. Please Google 8 queens problem and look down. </p>\n<h3 id=\"N-4\"><a href=\"#N-4\" class=\"headerlink\" title=\"N=4\"></a>N=4</h3><p>When N=4, there are only two ways to put these chesses.</p>\n<figure class=\"highlight c\"><figcaption><span>First</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0100</span></span><br><span class=\"line\"><span class=\"number\">0001</span></span><br><span class=\"line\"><span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">0010</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><figcaption><span>Second</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0010</span></span><br><span class=\"line\"><span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"number\">0001</span></span><br><span class=\"line\"><span class=\"number\">0100</span></span><br></pre></td></tr></table></figure>\n<p>Our program, as I just said, will try to find one of the two ways.</p>\n<p>So, Here we go~</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 123456789</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大能运行多少个皇后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> output_ok;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap_int</span><span class=\"params\">(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> *q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    temp = *(p);</span><br><span class=\"line\">    *(p) = *(q);</span><br><span class=\"line\">    *(q) = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> swap_ok, change_of_collisions, temp, n;</span><br><span class=\"line\"><span class=\"comment\">// swap_ok判断是否交换两个皇后会使得collisions减小</span></span><br><span class=\"line\"><span class=\"comment\">// change_of_collisions计算交换前后的collisions的变化量</span></span><br><span class=\"line\"><span class=\"comment\">// temp用作交换两个变量的临时变量</span></span><br><span class=\"line\"><span class=\"comment\">// n为皇后数目</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_solve1</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> n, FILE *fp)</span> <span class=\"comment\">// 传入queen,n和fp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 输出形象化的棋盘</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// *代表皇后 -代表棋盘</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\nBEGIN\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == x[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;\\nEND\\n\\n\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_solve</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> n, FILE *fp)</span> <span class=\"comment\">// 传入queen,n,fp</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 输出皇后数列到文件n-queens-out.txt</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;%d\\n&quot;</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">&quot;%d &quot;</span>, x[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print_solve1(x, n, fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp = fopen(<span class=\"string\">&quot;n-queens-out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"comment\">// n皇后</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@Author: ZhangJia\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@university: SCGY of USTC\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;@Github: Oyyko\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please Input the number N where the board is N*N.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;which means we will have N queens\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Do you want to output to\\&quot;n-queens-out.txt\\&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;input 1 as yes ,other character as no\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;output_ok);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (output_ok != <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        output_ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\nProgram START\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">clock_t</span> start, end;</span><br><span class=\"line\">    <span class=\"comment\">//用于记录时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_queen = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_dn = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * N - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_dp = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * N - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pre_attack = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *queen = pre_queen - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *dn = pre_dn - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *dp = pre_dp - <span class=\"number\">1</span> + n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *attack = pre_attack - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 四个pre数组开辟空间</span></span><br><span class=\"line\">    <span class=\"comment\">// 之后由对应的指针指向它们中间的位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 从而满足算法运行对数组下标的要求(即可能会出现负的下标)</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 queen[1] = pre_queen[0]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 queen[m] = pre_queen[m-1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dn[m]    = pre_dn[m-2]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dp[m]    = pre_dp[m+n-1]</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 dp[-2]   = pre_dp[-2+n-1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数列queen[i]=j 表示第i行的皇后在第j列</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列dn[i]=k 表示斜率为负的对角线中编号为i的对角线上有k个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列dp[i]=k 表示斜率为正的对角线中编号为i的对角线上有k个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">// dn,dp的编号方法分别为(列号+行号),(列号-行号)</span></span><br><span class=\"line\">    <span class=\"comment\">// 数列attack[i]=j 表示第i个被攻击的皇后在queen中的序号为j</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre_dn, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(pre_dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit, collisions, number_of_attacks, loopcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    collisions = <span class=\"number\">1</span>;</span><br><span class=\"line\">    start = clock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (collisions)</span><br><span class=\"line\">    <span class=\"comment\">// 当评估函数为0时，不断执行，直到评估函数为0</span></span><br><span class=\"line\">    <span class=\"comment\">// 评估函数为0也就是找到一组解</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(pre_dn, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(pre_dp, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (<span class=\"number\">2</span> * n - <span class=\"number\">1</span>));</span><br><span class=\"line\">        collisions = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pre_queen[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> Search_Max = (n &lt;&lt; <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> x = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        x = (x &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rand_max = n;</span><br><span class=\"line\">        <span class=\"keyword\">size_t</span> rand_seed;</span><br><span class=\"line\">        rand_seed = (<span class=\"keyword\">size_t</span>)time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>, j = <span class=\"number\">1</span>; i &lt;= Search_Max &amp;&amp; j &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 我们的目标是在初始化阶段生成一个很好的初态</span></span><br><span class=\"line\">            <span class=\"comment\">// 这样我们就能很快的爬山找到最优解</span></span><br><span class=\"line\">            <span class=\"comment\">// 因为初态的collisions已经很小</span></span><br><span class=\"line\">            <span class=\"comment\">// 因此爬山的过程会大幅度缩短</span></span><br><span class=\"line\">            <span class=\"comment\">// 优化的方法就是在初始化的时候就尽可能的避免碰撞</span></span><br><span class=\"line\">            <span class=\"comment\">// j的作用是衡量已经有多少个皇后被优化处理了,如果优化了n个,那么说明该停止优化了</span></span><br><span class=\"line\">            <span class=\"comment\">// i的作用是限制优化阶段所采用的时间 每循环一次i就自加1</span></span><br><span class=\"line\">            <span class=\"comment\">// 当i大于Search_Max的时候,强制退出优化过程</span></span><br><span class=\"line\">            rand_seed *= <span class=\"number\">1103515245</span>;</span><br><span class=\"line\">            rand_seed += <span class=\"number\">12345</span>;</span><br><span class=\"line\">            rand_seed = rand_seed % (x + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// LCG随机数生成器</span></span><br><span class=\"line\">            <span class=\"comment\">// X(n+1) = (a * X(n) + c) % m</span></span><br><span class=\"line\">            <span class=\"comment\">// 此处我采用a等于1103515245 c等于12345 的参数取法</span></span><br><span class=\"line\">            <span class=\"comment\">// 该取法为gcc编译器的参数取值</span></span><br><span class=\"line\">            <span class=\"comment\">// 为了合理的取值范围我采用了size_t类型</span></span><br><span class=\"line\">            <span class=\"comment\">// 实际上就是生成一个 0~x的随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">            m = rand_max * ((<span class=\"keyword\">double</span>)rand_seed / (<span class=\"keyword\">double</span>)x) + j;</span><br><span class=\"line\">            <span class=\"comment\">// m为 j~n之间的一个随机数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(dn[queen[m] + j]) &amp;&amp; !(dp[queen[m] - j]))</span><br><span class=\"line\">            <span class=\"comment\">// 如果 皇后m 与 皇后j 交换可以减小评估函数的值</span></span><br><span class=\"line\">            <span class=\"comment\">// 那么就交换m与j</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap_int(&amp;queen[m], &amp;queen[j]);</span><br><span class=\"line\">                ++dn[queen[j] + j];</span><br><span class=\"line\">                ++dp[queen[j] - j];</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                --rand_max;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在优化完了j个皇后之后</span></span><br><span class=\"line\">        <span class=\"comment\">// 打乱剩下的皇后,以使得初态更加平均</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时计算出所有dn与dp的值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = j; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m = rand() % rand_max + i;</span><br><span class=\"line\">            swap_int(&amp;queen[m], &amp;queen[i]);</span><br><span class=\"line\">            ++dn[queen[i] + i];</span><br><span class=\"line\">            ++dp[queen[i] - i];</span><br><span class=\"line\">            --rand_max;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 以上完成了对整个棋盘的初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">2</span> * n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dn[i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                collisions += (dn[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> - n; i &lt;= n - <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                collisions += (dp[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!collisions)</span><br><span class=\"line\">        <span class=\"comment\">// 若恰好生成了满足要求的皇后排列,则输出答案并且结束程序</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            end = clock();</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;It takes %f seconds to find a solotion\\n&quot;</span>, (<span class=\"keyword\">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class=\"line\">            print_solve(queen, n, fp);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        limit = collisions &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// means limit=0.5*collisions</span></span><br><span class=\"line\">                                 <span class=\"comment\">// limit的作用是评估何时适合重新计算attack数组，从而达到更快的运行速度。</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 如果每次交换都重新计算attack数组,那么开销过大.</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 为此我们采用设置阈值的方法</span></span><br><span class=\"line\">                                 <span class=\"comment\">// 仅当collision&lt;limit时，才重新计算attack。从而减小了不必要的损耗</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// compute attack START</span></span><br><span class=\"line\"></span><br><span class=\"line\">        number_of_attacks = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dn[queen[i] + i] &gt; <span class=\"number\">1</span> || dp[queen[i] - i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                attack[k++] = i;</span><br><span class=\"line\">                ++number_of_attacks;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//compute attack END</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loopcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// loopcount用来判断何时随机重启</span></span><br><span class=\"line\">        <span class=\"comment\">// 每次爬山都会增加loopcount的值</span></span><br><span class=\"line\">        <span class=\"comment\">// 当loopcount比较大时,说明爬山法陷入了局部困境,需要进行随机重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Initialization END</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化过程结束,下面开始爬山算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loopcount &lt; (n &lt;&lt; <span class=\"number\">5</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= number_of_attacks; ++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = attack[k];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = ((rand() &lt;&lt; <span class=\"number\">6</span>) + rand()) % (n) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 取一个被攻击的皇后和一个随机取得皇后,观察是否可以交换</span></span><br><span class=\"line\"></span><br><span class=\"line\">                swap_ok = <span class=\"number\">0</span>;</span><br><span class=\"line\">                change_of_collisions = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                change_of_collisions -= (dp[queen[i] - i] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dp[queen[j] - j] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dn[queen[i] + i] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions -= (dn[queen[j] + j] &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                change_of_collisions += (dn[queen[j] + i] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dn[queen[i] + j] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dp[queen[j] - i] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                change_of_collisions += (dp[queen[i] - j] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 计算评估函数的改变量</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (change_of_collisions &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(queen[i] + i - queen[j] - j) &amp;&amp; !(dp[queen[i] - j]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        change_of_collisions += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(queen[i] - i - queen[j] + j) &amp;&amp; !(dn[queen[i] + j]))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        change_of_collisions += <span class=\"number\">2</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (change_of_collisions &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// perform swap</span></span><br><span class=\"line\">                        <span class=\"comment\">// 若改变量小于0,则执行交换</span></span><br><span class=\"line\">                        --dn[queen[i] + i];</span><br><span class=\"line\">                        --dp[queen[i] - i];</span><br><span class=\"line\">                        --dn[queen[j] + j];</span><br><span class=\"line\">                        --dp[queen[j] - j];</span><br><span class=\"line\">                        ++dn[queen[j] + i];</span><br><span class=\"line\">                        ++dn[queen[i] + j];</span><br><span class=\"line\">                        ++dp[queen[j] - i];</span><br><span class=\"line\">                        ++dp[queen[i] - j];</span><br><span class=\"line\"></span><br><span class=\"line\">                        temp = queen[j];</span><br><span class=\"line\">                        queen[j] = queen[i];</span><br><span class=\"line\">                        queen[i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">                        collisions += change_of_collisions;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!collisions)</span><br><span class=\"line\">                        <span class=\"comment\">// 若找到了解,则输出答案并且结束程序</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            end = clock();</span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;It takes %f seconds to find a solotion\\n&quot;</span>, (<span class=\"keyword\">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class=\"line\">                            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Press any key to EXIT\\n&quot;</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (output_ok)</span><br><span class=\"line\">                                print_solve(queen, n, fp);</span><br><span class=\"line\">                            getchar();</span><br><span class=\"line\">                            getchar();</span><br><span class=\"line\">                            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (collisions &lt; limit)</span><br><span class=\"line\">                        <span class=\"comment\">// 当棋盘变动较大时,重新计算attack数列</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            limit = collisions &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"comment\">// compute attack</span></span><br><span class=\"line\"></span><br><span class=\"line\">                            number_of_attacks = <span class=\"number\">0</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (dn[queen[i] + i] &gt; <span class=\"number\">1</span> || dp[queen[i] - i] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    attack[k++] = i;</span><br><span class=\"line\">                                    ++number_of_attacks;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            loopcount = loopcount + number_of_attacks;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>"},{"title":"name and shakespeare","date":"2021-01-24T16:00:00.000Z","mathjax":true,"_content":"\n匿名函数与莎士比亚大定理\n<!-- more -->\n\nThis article is translated from [Here](https://cs.stackexchange.com/questions/22497/why-is-it-important-for-functions-to-be-anonymous-in-lambda-calculus)\n\n## 提问：为什么在lambda calculus里面，函数必须是匿名的。\n\n我正在观看一个Youtube视频，在这个视频里面，讲者介绍了Y组合子的概念。\nY组合子概念产生的动机之一，正如讲者所述，是为了用lambda calculus来表示递归函数，以使得Church理论(任何能被实际上计算的东西都可以用lambda calculus来计算)保持成立。\n我的问题在于：为什么我们不能通过名字来简单的调用一个函数。例如日常生活中我们经常会写下这种式子：\n$$\nn(x,y)=x+y\n$$\n但是在lambda calculus里面我们不允许把这个函数与名字n相关联，我们只能匿名的定义它为\n$$\n(x,y)\\rightarrow x+y\n$$\n为什么在lambda calculus里面我们不能拥有被命名的函数? 如果存在具名函数，我们会破坏什么准则? 或者仅仅是我搞错了视频的意思?\n\n\n## 回答\n关于这个问题的主要结论来自一个十六世纪晚期的英国数学家，他叫莎士比亚。他最著名的关于这个问题的论文名为《罗密欧与茱丽叶》，在1597年发表。\n\n他的主要结论在第二幕的第二场景中阐明。即如下的著名定理：\n> 名称有什么关系呢?玫瑰不叫玫瑰,依然芳香如故!\n\n这个定理可以被直观的理解为\"名字对意义毫无帮助\"\n莎士比亚的论文的大部分内容是一个用来补充定理的例子，用以表明名字尽管名字没有任何意义，但它们却是无穷无尽的问题的根源。\n正如莎士比亚所指出的那样，名称可以在不改变含义的情况下进行更改，这一操作后来被丘奇及其追随者称为α转换。结果，如何确定名字表示的意义变成了造成了许许多多的问题。例如我们要发展“**环境**”的概念，在环境中名字-意义联系是确定的，并且发展出一系列的规则来辨别当前的环境。这使得计算机科学家们困惑了很长一段时间，引起了诸如臭名昭著的Funarg问题之类的技术难题。“环境”在许多流行的编程语言中仍然是个大问题，几乎和莎士比亚在其论文中提出的例子一样**致命**。\n这个问题也与形式语言理论中提出的问题接近，即必须将字母和形式系统定义为同构，以便强调字母符号是抽象实体，而与它们如何作为某些集合中的元素而“实现”无关。\n莎士比亚的主要结果也表明了科学随后即将与魔术和宗教告别。因为在魔术与宗教的世界里面，人们认为一个东西有它的“真名”。\n所有这一切的结论是：尽管名字可以方便人们的日常工作和生活，但是在理论研究中不被名字而困扰更为重要。\n记住：**不是所有被叫做娘的都是你的母亲。**\n\n### 评论\n最近，玫瑰正在被foobar所取代。","source":"_posts/NAME-and-Shakespeare.md","raw":"---\ntitle: name and shakespeare\ndate: 2021-01-25\ntag: \n- Translation\n- Good-article\ncategory: Good-article\nmathjax: true\n---\n\n匿名函数与莎士比亚大定理\n<!-- more -->\n\nThis article is translated from [Here](https://cs.stackexchange.com/questions/22497/why-is-it-important-for-functions-to-be-anonymous-in-lambda-calculus)\n\n## 提问：为什么在lambda calculus里面，函数必须是匿名的。\n\n我正在观看一个Youtube视频，在这个视频里面，讲者介绍了Y组合子的概念。\nY组合子概念产生的动机之一，正如讲者所述，是为了用lambda calculus来表示递归函数，以使得Church理论(任何能被实际上计算的东西都可以用lambda calculus来计算)保持成立。\n我的问题在于：为什么我们不能通过名字来简单的调用一个函数。例如日常生活中我们经常会写下这种式子：\n$$\nn(x,y)=x+y\n$$\n但是在lambda calculus里面我们不允许把这个函数与名字n相关联，我们只能匿名的定义它为\n$$\n(x,y)\\rightarrow x+y\n$$\n为什么在lambda calculus里面我们不能拥有被命名的函数? 如果存在具名函数，我们会破坏什么准则? 或者仅仅是我搞错了视频的意思?\n\n\n## 回答\n关于这个问题的主要结论来自一个十六世纪晚期的英国数学家，他叫莎士比亚。他最著名的关于这个问题的论文名为《罗密欧与茱丽叶》，在1597年发表。\n\n他的主要结论在第二幕的第二场景中阐明。即如下的著名定理：\n> 名称有什么关系呢?玫瑰不叫玫瑰,依然芳香如故!\n\n这个定理可以被直观的理解为\"名字对意义毫无帮助\"\n莎士比亚的论文的大部分内容是一个用来补充定理的例子，用以表明名字尽管名字没有任何意义，但它们却是无穷无尽的问题的根源。\n正如莎士比亚所指出的那样，名称可以在不改变含义的情况下进行更改，这一操作后来被丘奇及其追随者称为α转换。结果，如何确定名字表示的意义变成了造成了许许多多的问题。例如我们要发展“**环境**”的概念，在环境中名字-意义联系是确定的，并且发展出一系列的规则来辨别当前的环境。这使得计算机科学家们困惑了很长一段时间，引起了诸如臭名昭著的Funarg问题之类的技术难题。“环境”在许多流行的编程语言中仍然是个大问题，几乎和莎士比亚在其论文中提出的例子一样**致命**。\n这个问题也与形式语言理论中提出的问题接近，即必须将字母和形式系统定义为同构，以便强调字母符号是抽象实体，而与它们如何作为某些集合中的元素而“实现”无关。\n莎士比亚的主要结果也表明了科学随后即将与魔术和宗教告别。因为在魔术与宗教的世界里面，人们认为一个东西有它的“真名”。\n所有这一切的结论是：尽管名字可以方便人们的日常工作和生活，但是在理论研究中不被名字而困扰更为重要。\n记住：**不是所有被叫做娘的都是你的母亲。**\n\n### 评论\n最近，玫瑰正在被foobar所取代。","slug":"NAME-and-Shakespeare","published":1,"updated":"2021-01-25T07:44:03.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc970008bh8y2wqdh2uw","content":"<p>匿名函数与莎士比亚大定理<br><a id=\"more\"></a></p>\n<p>This article is translated from <a href=\"https://cs.stackexchange.com/questions/22497/why-is-it-important-for-functions-to-be-anonymous-in-lambda-calculus\">Here</a></p>\n<h2 id=\"提问：为什么在lambda-calculus里面，函数必须是匿名的。\"><a href=\"#提问：为什么在lambda-calculus里面，函数必须是匿名的。\" class=\"headerlink\" title=\"提问：为什么在lambda calculus里面，函数必须是匿名的。\"></a>提问：为什么在lambda calculus里面，函数必须是匿名的。</h2><p>我正在观看一个Youtube视频，在这个视频里面，讲者介绍了Y组合子的概念。<br>Y组合子概念产生的动机之一，正如讲者所述，是为了用lambda calculus来表示递归函数，以使得Church理论(任何能被实际上计算的东西都可以用lambda calculus来计算)保持成立。<br>我的问题在于：为什么我们不能通过名字来简单的调用一个函数。例如日常生活中我们经常会写下这种式子：</p>\n<script type=\"math/tex; mode=display\">\nn(x,y)=x+y</script><p>但是在lambda calculus里面我们不允许把这个函数与名字n相关联，我们只能匿名的定义它为</p>\n<script type=\"math/tex; mode=display\">\n(x,y)\\rightarrow x+y</script><p>为什么在lambda calculus里面我们不能拥有被命名的函数? 如果存在具名函数，我们会破坏什么准则? 或者仅仅是我搞错了视频的意思?</p>\n<h2 id=\"回答\"><a href=\"#回答\" class=\"headerlink\" title=\"回答\"></a>回答</h2><p>关于这个问题的主要结论来自一个十六世纪晚期的英国数学家，他叫莎士比亚。他最著名的关于这个问题的论文名为《罗密欧与茱丽叶》，在1597年发表。</p>\n<p>他的主要结论在第二幕的第二场景中阐明。即如下的著名定理：</p>\n<blockquote>\n<p>名称有什么关系呢?玫瑰不叫玫瑰,依然芳香如故!</p>\n</blockquote>\n<p>这个定理可以被直观的理解为”名字对意义毫无帮助”<br>莎士比亚的论文的大部分内容是一个用来补充定理的例子，用以表明名字尽管名字没有任何意义，但它们却是无穷无尽的问题的根源。<br>正如莎士比亚所指出的那样，名称可以在不改变含义的情况下进行更改，这一操作后来被丘奇及其追随者称为α转换。结果，如何确定名字表示的意义变成了造成了许许多多的问题。例如我们要发展“<strong>环境</strong>”的概念，在环境中名字-意义联系是确定的，并且发展出一系列的规则来辨别当前的环境。这使得计算机科学家们困惑了很长一段时间，引起了诸如臭名昭著的Funarg问题之类的技术难题。“环境”在许多流行的编程语言中仍然是个大问题，几乎和莎士比亚在其论文中提出的例子一样<strong>致命</strong>。<br>这个问题也与形式语言理论中提出的问题接近，即必须将字母和形式系统定义为同构，以便强调字母符号是抽象实体，而与它们如何作为某些集合中的元素而“实现”无关。<br>莎士比亚的主要结果也表明了科学随后即将与魔术和宗教告别。因为在魔术与宗教的世界里面，人们认为一个东西有它的“真名”。<br>所有这一切的结论是：尽管名字可以方便人们的日常工作和生活，但是在理论研究中不被名字而困扰更为重要。<br>记住：<strong>不是所有被叫做娘的都是你的母亲。</strong></p>\n<h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>最近，玫瑰正在被foobar所取代。</p>\n","site":{"data":{}},"excerpt":"<p>匿名函数与莎士比亚大定理<br>","more":"</p>\n<p>This article is translated from <a href=\"https://cs.stackexchange.com/questions/22497/why-is-it-important-for-functions-to-be-anonymous-in-lambda-calculus\">Here</a></p>\n<h2 id=\"提问：为什么在lambda-calculus里面，函数必须是匿名的。\"><a href=\"#提问：为什么在lambda-calculus里面，函数必须是匿名的。\" class=\"headerlink\" title=\"提问：为什么在lambda calculus里面，函数必须是匿名的。\"></a>提问：为什么在lambda calculus里面，函数必须是匿名的。</h2><p>我正在观看一个Youtube视频，在这个视频里面，讲者介绍了Y组合子的概念。<br>Y组合子概念产生的动机之一，正如讲者所述，是为了用lambda calculus来表示递归函数，以使得Church理论(任何能被实际上计算的东西都可以用lambda calculus来计算)保持成立。<br>我的问题在于：为什么我们不能通过名字来简单的调用一个函数。例如日常生活中我们经常会写下这种式子：</p>\n<script type=\"math/tex; mode=display\">\nn(x,y)=x+y</script><p>但是在lambda calculus里面我们不允许把这个函数与名字n相关联，我们只能匿名的定义它为</p>\n<script type=\"math/tex; mode=display\">\n(x,y)\\rightarrow x+y</script><p>为什么在lambda calculus里面我们不能拥有被命名的函数? 如果存在具名函数，我们会破坏什么准则? 或者仅仅是我搞错了视频的意思?</p>\n<h2 id=\"回答\"><a href=\"#回答\" class=\"headerlink\" title=\"回答\"></a>回答</h2><p>关于这个问题的主要结论来自一个十六世纪晚期的英国数学家，他叫莎士比亚。他最著名的关于这个问题的论文名为《罗密欧与茱丽叶》，在1597年发表。</p>\n<p>他的主要结论在第二幕的第二场景中阐明。即如下的著名定理：</p>\n<blockquote>\n<p>名称有什么关系呢?玫瑰不叫玫瑰,依然芳香如故!</p>\n</blockquote>\n<p>这个定理可以被直观的理解为”名字对意义毫无帮助”<br>莎士比亚的论文的大部分内容是一个用来补充定理的例子，用以表明名字尽管名字没有任何意义，但它们却是无穷无尽的问题的根源。<br>正如莎士比亚所指出的那样，名称可以在不改变含义的情况下进行更改，这一操作后来被丘奇及其追随者称为α转换。结果，如何确定名字表示的意义变成了造成了许许多多的问题。例如我们要发展“<strong>环境</strong>”的概念，在环境中名字-意义联系是确定的，并且发展出一系列的规则来辨别当前的环境。这使得计算机科学家们困惑了很长一段时间，引起了诸如臭名昭著的Funarg问题之类的技术难题。“环境”在许多流行的编程语言中仍然是个大问题，几乎和莎士比亚在其论文中提出的例子一样<strong>致命</strong>。<br>这个问题也与形式语言理论中提出的问题接近，即必须将字母和形式系统定义为同构，以便强调字母符号是抽象实体，而与它们如何作为某些集合中的元素而“实现”无关。<br>莎士比亚的主要结果也表明了科学随后即将与魔术和宗教告别。因为在魔术与宗教的世界里面，人们认为一个东西有它的“真名”。<br>所有这一切的结论是：尽管名字可以方便人们的日常工作和生活，但是在理论研究中不被名字而困扰更为重要。<br>记住：<strong>不是所有被叫做娘的都是你的母亲。</strong></p>\n<h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><p>最近，玫瑰正在被foobar所取代。</p>"},{"title":"Fix a grub bug","date":"2021-03-19T16:00:00.000Z","mathjax":false,"_content":"In this article, I will record how to fix the problem that grub can't find Windows on nvme. So that someday, I can reuse this to help myself.\n<!-- more -->\n\nFirst of all, install `os-prober`.\n\nThen, run `update-grub` or `grub-mkconfig`.\nThen you will find that os-prober is not working. Because:\n","source":"_posts/fix-grub.md","raw":"---\ntitle: Fix a grub bug\ndate: 2021-03-20\ntag: \n- BUG\ncategory: BUG\nmathjax: false\n---\nIn this article, I will record how to fix the problem that grub can't find Windows on nvme. So that someday, I can reuse this to help myself.\n<!-- more -->\n\nFirst of all, install `os-prober`.\n\nThen, run `update-grub` or `grub-mkconfig`.\nThen you will find that os-prober is not working. Because:\n","slug":"fix-grub","published":1,"updated":"2021-03-20T10:28:57.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc980009bh8yhpll3wpf","content":"<p>In this article, I will record how to fix the problem that grub can’t find Windows on nvme. So that someday, I can reuse this to help myself.<br><a id=\"more\"></a></p>\n<p>First of all, install <code>os-prober</code>.</p>\n<p>Then, run <code>update-grub</code> or <code>grub-mkconfig</code>.<br>Then you will find that os-prober is not working. Because:</p>\n","site":{"data":{}},"excerpt":"<p>In this article, I will record how to fix the problem that grub can’t find Windows on nvme. So that someday, I can reuse this to help myself.<br>","more":"</p>\n<p>First of all, install <code>os-prober</code>.</p>\n<p>Then, run <code>update-grub</code> or <code>grub-mkconfig</code>.<br>Then you will find that os-prober is not working. Because:</p>"},{"title":"Hello World","date":"2020-12-26T16:00:00.000Z","mathjax":false,"_content":"\nA rust way to say hello world!\n\n<!--more-->\n\n## Code in Rust\n```rust\nuse ferris_says::say;\n\nuse std::io::{stdout, BufWriter};\n\nfn main() \n{\n    let stdout=stdout();\n    let message = String::from(\"Hello fellows!\\nHello again.\\n\");\n    let width =  message.chars().count();\n\n    let mut writer = BufWriter::new(stdout.lock());\n\n    say(message.as_bytes(),width,&mut writer).unwrap();\n    \n}\n```\n\n## Output\n\n```\n ________________\n/ Hello fellows! \\\n\\ Hello again.   /\n ----------------\n        \\\n         \\\n            _~^~^~_\n        \\) /  o o  \\ (/\n          '_   -   _'\n          / '-----' \\\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2020-12-27\ntag: Rust\ncategory: Rust\nmathjax: false\n---\n\nA rust way to say hello world!\n\n<!--more-->\n\n## Code in Rust\n```rust\nuse ferris_says::say;\n\nuse std::io::{stdout, BufWriter};\n\nfn main() \n{\n    let stdout=stdout();\n    let message = String::from(\"Hello fellows!\\nHello again.\\n\");\n    let width =  message.chars().count();\n\n    let mut writer = BufWriter::new(stdout.lock());\n\n    say(message.as_bytes(),width,&mut writer).unwrap();\n    \n}\n```\n\n## Output\n\n```\n ________________\n/ Hello fellows! \\\n\\ Hello again.   /\n ----------------\n        \\\n         \\\n            _~^~^~_\n        \\) /  o o  \\ (/\n          '_   -   _'\n          / '-----' \\\n```\n","slug":"hello-world","published":1,"updated":"2020-12-27T10:19:35.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc99000dbh8y0wka2haw","content":"<p>A rust way to say hello world!</p>\n<a id=\"more\"></a>\n<h2 id=\"Code-in-Rust\"><a href=\"#Code-in-Rust\" class=\"headerlink\" title=\"Code in Rust\"></a>Code in Rust</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> ferris_says::say;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stdout=stdout();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"built_in\">String</span>::from(<span class=\"string\">&quot;Hello fellows!\\nHello again.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width =  message.chars().count();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class=\"line\"></span><br><span class=\"line\">    say(message.as_bytes(),width,&amp;<span class=\"keyword\">mut</span> writer).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ________________</span><br><span class=\"line\">/ Hello fellows! <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span> Hello again.   /</span><br><span class=\"line\"> ----------------</span><br><span class=\"line\">        <span class=\"string\">\\</span></span><br><span class=\"line\">         <span class=\"string\">\\</span></span><br><span class=\"line\">            _~^~^~_</span><br><span class=\"line\">        <span class=\"string\">\\)</span> /  o o  <span class=\"string\">\\</span> (/</span><br><span class=\"line\">          <span class=\"string\">&#x27;_   -   _&#x27;</span></span><br><span class=\"line\">          / <span class=\"string\">&#x27;-----&#x27;</span> <span class=\"string\">\\</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>A rust way to say hello world!</p>","more":"<h2 id=\"Code-in-Rust\"><a href=\"#Code-in-Rust\" class=\"headerlink\" title=\"Code in Rust\"></a>Code in Rust</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> ferris_says::say;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stdout=stdout();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"built_in\">String</span>::from(<span class=\"string\">&quot;Hello fellows!\\nHello again.\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width =  message.chars().count();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class=\"line\"></span><br><span class=\"line\">    say(message.as_bytes(),width,&amp;<span class=\"keyword\">mut</span> writer).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ________________</span><br><span class=\"line\">/ Hello fellows! <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span> Hello again.   /</span><br><span class=\"line\"> ----------------</span><br><span class=\"line\">        <span class=\"string\">\\</span></span><br><span class=\"line\">         <span class=\"string\">\\</span></span><br><span class=\"line\">            _~^~^~_</span><br><span class=\"line\">        <span class=\"string\">\\)</span> /  o o  <span class=\"string\">\\</span> (/</span><br><span class=\"line\">          <span class=\"string\">&#x27;_   -   _&#x27;</span></span><br><span class=\"line\">          / <span class=\"string\">&#x27;-----&#x27;</span> <span class=\"string\">\\</span></span><br></pre></td></tr></table></figure>"},{"title":"Personal Settings","date":"2021-01-24T16:00:00.000Z","tag":null,"category":null,"mathjax":false,"_content":"Personal Settings. Such as zshrc/vimrc.\n<!-- more -->\n### zshrc\n```\nalias c=\"clear\"\n\nalias up=\"sudo pacman -Syu\"\nalias ins=\"sudo pacman -S\"\nalias uins=\"sudo pacman -R\"\n\nalias re=reboot\nalias po=poweroff\n\n```\n\n### vimrc\n```\nset number\nsyntax on\nset cursorline\n\nset nocompatible\n\nset showmode\nset showcmd\n\n\nfiletype on\nfiletype indent on\nfiletype plugin on\n\nset autoindent smartindent\n\nset tabstop=4\nset expandtab\nset shiftwidth=4\nset laststatus=2\n\nset ruler\nset showmatch\n\nset noerrorbells\n\n\n\n```","source":"_posts/personal.md","raw":"---\ntitle: Personal Settings\ndate: 2021-01-25\ntag: \ncategory:\nmathjax: false\n---\nPersonal Settings. Such as zshrc/vimrc.\n<!-- more -->\n### zshrc\n```\nalias c=\"clear\"\n\nalias up=\"sudo pacman -Syu\"\nalias ins=\"sudo pacman -S\"\nalias uins=\"sudo pacman -R\"\n\nalias re=reboot\nalias po=poweroff\n\n```\n\n### vimrc\n```\nset number\nsyntax on\nset cursorline\n\nset nocompatible\n\nset showmode\nset showcmd\n\n\nfiletype on\nfiletype indent on\nfiletype plugin on\n\nset autoindent smartindent\n\nset tabstop=4\nset expandtab\nset shiftwidth=4\nset laststatus=2\n\nset ruler\nset showmatch\n\nset noerrorbells\n\n\n\n```","slug":"personal","published":1,"updated":"2021-03-20T10:21:21.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc9a000ebh8ydayi7apz","content":"<p>Personal Settings. Such as zshrc/vimrc.<br><a id=\"more\"></a></p>\n<h3 id=\"zshrc\"><a href=\"#zshrc\" class=\"headerlink\" title=\"zshrc\"></a>zshrc</h3><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">c</span>=<span class=\"string\">&quot;clear&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">up</span>=<span class=\"string\">&quot;sudo pacman -Syu&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">ins</span>=<span class=\"string\">&quot;sudo pacman -S&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">uins</span>=<span class=\"string\">&quot;sudo pacman -R&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">re</span>=reboot</span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">po</span>=poweroff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"vimrc\"><a href=\"#vimrc\" class=\"headerlink\" title=\"vimrc\"></a>vimrc</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> number</span><br><span class=\"line\">syntax on</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> nocompatible</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showmode</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showcmd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filetype on</span><br><span class=\"line\">filetype indent on</span><br><span class=\"line\">filetype plugin on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> autoindent smartindent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">tabstop</span>=4</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> expandtab</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">shiftwidth</span>=4</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">laststatus</span>=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> ruler</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showmatch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> noerrorbells</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Personal Settings. Such as zshrc/vimrc.<br>","more":"</p>\n<h3 id=\"zshrc\"><a href=\"#zshrc\" class=\"headerlink\" title=\"zshrc\"></a>zshrc</h3><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">c</span>=<span class=\"string\">&quot;clear&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">up</span>=<span class=\"string\">&quot;sudo pacman -Syu&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">ins</span>=<span class=\"string\">&quot;sudo pacman -S&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">uins</span>=<span class=\"string\">&quot;sudo pacman -R&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">re</span>=reboot</span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">po</span>=poweroff</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"vimrc\"><a href=\"#vimrc\" class=\"headerlink\" title=\"vimrc\"></a>vimrc</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> number</span><br><span class=\"line\">syntax on</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> cursorline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> nocompatible</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showmode</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showcmd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filetype on</span><br><span class=\"line\">filetype indent on</span><br><span class=\"line\">filetype plugin on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> autoindent smartindent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">tabstop</span>=4</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> expandtab</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">shiftwidth</span>=4</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">laststatus</span>=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> ruler</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> showmatch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">set</span> noerrorbells</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"sicp-1","date":"2021-02-13T10:55:06.000Z","mathjax":false,"_content":"SICP Note\n<!--more-->\n\n","source":"_posts/sicp-1.md","raw":"---\ntitle: sicp-1\ndate: 2021-02-13 18:55:06\ntag: \n- SICP\n- PLT\ncategory: PLT\nmathjax: false\n---\nSICP Note\n<!--more-->\n\n","slug":"sicp-1","published":1,"updated":"2021-02-13T13:18:09.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmhlbc9b000ibh8y2rd40w40","content":"<p>SICP Note<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>SICP Note<br>","more":"</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckmhlbc900001bh8y08084suc","category_id":"ckmhlbc940004bh8yfzeu9ah4","_id":"ckmhlbc9a000fbh8yce6phriu"},{"post_id":"ckmhlbc930003bh8y9zv30rxk","category_id":"ckmhlbc98000abh8y2qmn1vii","_id":"ckmhlbc9c000kbh8y8oyk4yns"},{"post_id":"ckmhlbc960007bh8y5v9l79pe","category_id":"ckmhlbc9b000gbh8y7nmp4c0j","_id":"ckmhlbc9e000nbh8y4yha9ows"},{"post_id":"ckmhlbc970008bh8y2wqdh2uw","category_id":"ckmhlbc9d000lbh8ygox6amrz","_id":"ckmhlbc9f000sbh8y3vlt097w"},{"post_id":"ckmhlbc980009bh8yhpll3wpf","category_id":"ckmhlbc9e000pbh8y4v6q870a","_id":"ckmhlbc9g000vbh8yheiv5hcq"},{"post_id":"ckmhlbc99000dbh8y0wka2haw","category_id":"ckmhlbc9f000ubh8y34sma30r","_id":"ckmhlbc9g0010bh8y58hr4buc"},{"post_id":"ckmhlbc9b000ibh8y2rd40w40","category_id":"ckmhlbc9g000xbh8y1ml23f9e","_id":"ckmhlbc9h0013bh8ye2yf9tas"}],"PostTag":[{"post_id":"ckmhlbc900001bh8y08084suc","tag_id":"ckmhlbc950005bh8y8axr4fj5","_id":"ckmhlbc99000cbh8y6f6e6ob8"},{"post_id":"ckmhlbc930003bh8y9zv30rxk","tag_id":"ckmhlbc98000bbh8yfj6v4m6s","_id":"ckmhlbc9c000jbh8yc770dlnl"},{"post_id":"ckmhlbc960007bh8y5v9l79pe","tag_id":"ckmhlbc9b000hbh8y9eixfas8","_id":"ckmhlbc9f000qbh8y77c01tfz"},{"post_id":"ckmhlbc960007bh8y5v9l79pe","tag_id":"ckmhlbc98000bbh8yfj6v4m6s","_id":"ckmhlbc9f000rbh8y11t167e1"},{"post_id":"ckmhlbc970008bh8y2wqdh2uw","tag_id":"ckmhlbc9e000obh8yhngshmtw","_id":"ckmhlbc9g000ybh8y3ij5683o"},{"post_id":"ckmhlbc970008bh8y2wqdh2uw","tag_id":"ckmhlbc9f000tbh8y6u0t0tgc","_id":"ckmhlbc9g000zbh8ybvrpbyum"},{"post_id":"ckmhlbc980009bh8yhpll3wpf","tag_id":"ckmhlbc9g000wbh8ygu8l1tk1","_id":"ckmhlbc9h0012bh8yb9v96mmu"},{"post_id":"ckmhlbc99000dbh8y0wka2haw","tag_id":"ckmhlbc9g0011bh8y6ptt0t3t","_id":"ckmhlbc9h0015bh8y1j0v9b5s"},{"post_id":"ckmhlbc9b000ibh8y2rd40w40","tag_id":"ckmhlbc9h0014bh8y95ddgbis","_id":"ckmhlbc9i0017bh8yg5tk81gz"},{"post_id":"ckmhlbc9b000ibh8y2rd40w40","tag_id":"ckmhlbc9h0016bh8y8qrf6c1s","_id":"ckmhlbc9i0018bh8ycx4r18w5"}],"Tag":[{"name":"C++","_id":"ckmhlbc950005bh8y8axr4fj5"},{"name":"C","_id":"ckmhlbc98000bbh8yfj6v4m6s"},{"name":"Algorithm","_id":"ckmhlbc9b000hbh8y9eixfas8"},{"name":"Translation","_id":"ckmhlbc9e000obh8yhngshmtw"},{"name":"Good-article","_id":"ckmhlbc9f000tbh8y6u0t0tgc"},{"name":"BUG","_id":"ckmhlbc9g000wbh8ygu8l1tk1"},{"name":"Rust","_id":"ckmhlbc9g0011bh8y6ptt0t3t"},{"name":"SICP","_id":"ckmhlbc9h0014bh8y95ddgbis"},{"name":"PLT","_id":"ckmhlbc9h0016bh8y8qrf6c1s"}]}}